[
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "aboutus",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "Author",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "MyPasswordResetView",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "MyPasswordResetDoneView",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "MyPasswordResetCompleteView",
        "importPath": "user.views",
        "description": "user.views",
        "isExtraImport": true,
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django_countries.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django_countries.fields",
        "description": "django_countries.fields",
        "detail": "django_countries.fields",
        "documentation": {}
    },
    {
        "label": "CountryField",
        "importPath": "django_countries.fields",
        "description": "django_countries.fields",
        "isExtraImport": true,
        "detail": "django_countries.fields",
        "documentation": {}
    },
    {
        "label": "CountryField",
        "importPath": "django_countries.fields",
        "description": "django_countries.fields",
        "isExtraImport": true,
        "detail": "django_countries.fields",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "parse_date",
        "importPath": "django.utils.dateparse",
        "description": "django.utils.dateparse",
        "isExtraImport": true,
        "detail": "django.utils.dateparse",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "FormView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "rrule",
        "importPath": "dateutil",
        "description": "dateutil",
        "isExtraImport": true,
        "detail": "dateutil",
        "documentation": {}
    },
    {
        "label": "relativedelta",
        "importPath": "dateutil.relativedelta",
        "description": "dateutil.relativedelta",
        "isExtraImport": true,
        "detail": "dateutil.relativedelta",
        "documentation": {}
    },
    {
        "label": "optparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "optparse",
        "description": "optparse",
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "fontforge",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fontforge",
        "description": "fontforge",
        "detail": "fontforge",
        "documentation": {}
    },
    {
        "label": "md5",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "md5",
        "description": "md5",
        "detail": "md5",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "shop.models",
        "description": "shop.models",
        "isExtraImport": true,
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "category",
        "importPath": "shop.models",
        "description": "shop.models",
        "isExtraImport": true,
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "Slide",
        "importPath": "shop.models",
        "description": "shop.models",
        "isExtraImport": true,
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "shop.models",
        "description": "shop.models",
        "isExtraImport": true,
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "category",
        "importPath": "shop.models",
        "description": "shop.models",
        "isExtraImport": true,
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "Coupon",
        "importPath": "shop.models",
        "description": "shop.models",
        "isExtraImport": true,
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "company",
        "importPath": "shop.models",
        "description": "shop.models",
        "isExtraImport": true,
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "PasswordResetRequest",
        "importPath": "shop.models",
        "description": "shop.models",
        "isExtraImport": true,
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "shop.models",
        "description": "shop.models",
        "isExtraImport": true,
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "OrderItem",
        "importPath": "shop.models",
        "description": "shop.models",
        "isExtraImport": true,
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "shop.models",
        "description": "shop.models",
        "isExtraImport": true,
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "Address",
        "importPath": "shop.models",
        "description": "shop.models",
        "isExtraImport": true,
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "shop.models",
        "description": "shop.models",
        "isExtraImport": true,
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "Coupon",
        "importPath": "shop.models",
        "description": "shop.models",
        "isExtraImport": true,
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "Refund",
        "importPath": "shop.models",
        "description": "shop.models",
        "isExtraImport": true,
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "AboutUs",
        "importPath": "shop.models",
        "description": "shop.models",
        "isExtraImport": true,
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "ContactForm",
        "importPath": "shop.models",
        "description": "shop.models",
        "isExtraImport": true,
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "category",
        "importPath": "shop.models",
        "description": "shop.models",
        "isExtraImport": true,
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "company",
        "importPath": "shop.models",
        "description": "shop.models",
        "isExtraImport": true,
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "subcategory",
        "importPath": "shop.models",
        "description": "shop.models",
        "isExtraImport": true,
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "CountrySelectWidget",
        "importPath": "django_countries.widgets",
        "description": "django_countries.widgets",
        "isExtraImport": true,
        "detail": "django_countries.widgets",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "razorpay",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "razorpay",
        "description": "razorpay",
        "detail": "razorpay",
        "documentation": {}
    },
    {
        "label": "stripe",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stripe",
        "description": "stripe",
        "detail": "stripe",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "EmailMessage",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "EmailMultiAlternatives",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "get_template",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "PasswordResetView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetCompleteView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "default_token_generator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_encode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "force_bytes",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "DeliveryConfig",
        "kind": 6,
        "importPath": "delivery.apps",
        "description": "delivery.apps",
        "peekOfCode": "class DeliveryConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'delivery'",
        "detail": "delivery.apps",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "delivery.urls",
        "description": "delivery.urls",
        "peekOfCode": "app_name = 'delivery'\nfrom django.contrib import admin\nfrom django.urls import path,include\nfrom .views import DeliveryView\nurlpatterns = [\n    path('', DeliveryView, name='delV'),\n]",
        "detail": "delivery.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "delivery.urls",
        "description": "delivery.urls",
        "peekOfCode": "urlpatterns = [\n    path('', DeliveryView, name='delV'),\n]",
        "detail": "delivery.urls",
        "documentation": {}
    },
    {
        "label": "DeliveryView",
        "kind": 2,
        "importPath": "delivery.views",
        "description": "delivery.views",
        "peekOfCode": "def DeliveryView(request):\n    return render(request,\"delivery/index.html\")",
        "detail": "delivery.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "project.asgi",
        "description": "project.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "project.asgi",
        "documentation": {}
    },
    {
        "label": "show_toolbar",
        "kind": 2,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "def show_toolbar(request):\n    return False\nDEBUG_TOOLBAR_CONFIG = {\n    'INTERCEPT_REDIRECTS': False,\n    'SHOW_TOOLBAR_CALLBACK': show_toolbar\n}\nROOT_URLCONF = 'project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-xi*!&#k=ad=s#ok^c!3c1e4s3%!&tla7l$z)s46k%n5k8kji$$'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-xi*!&#k=ad=s#ok^c!3c1e4s3%!&tla7l$z)s46k%n5k8kji$$'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'jazzmin',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'jazzmin',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'jazzmin',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'jazzmin',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # 'razorpay-python',\n    'debug_toolbar',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'debug_toolbar.middleware.DebugToolbarMiddleware',\n]",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG_TOOLBAR_PANELS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "DEBUG_TOOLBAR_PANELS = [\n    'debug_toolbar.panels.versions.VersionsPanel',\n    'debug_toolbar.panels.timer.TimerPanel',\n    'debug_toolbar.panels.settings.SettingsPanel',\n    'debug_toolbar.panels.headers.HeadersPanel',\n    'debug_toolbar.panels.request.RequestPanel',\n    'debug_toolbar.panels.sql.SQLPanel',\n    'debug_toolbar.panels.staticfiles.StaticFilesPanel',\n    'debug_toolbar.panels.templates.TemplatesPanel',\n    'debug_toolbar.panels.cache.CachePanel',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG_TOOLBAR_CONFIG",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "DEBUG_TOOLBAR_CONFIG = {\n    'INTERCEPT_REDIRECTS': False,\n    'SHOW_TOOLBAR_CALLBACK': show_toolbar\n}\nROOT_URLCONF = 'project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "ROOT_URLCONF = 'project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "WSGI_APPLICATION = 'project.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static_in_env')]",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static_in_env')]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static_root')",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static_in_env')]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static_root')\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media_root')",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static_in_env')]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static_root')\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media_root')\n# Default primary key field type",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static_in_env')]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static_root')\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media_root')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static_in_env')]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static_root')\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media_root')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static_in_env')]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static_root')\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media_root')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = config('EMAIL_US')",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'static_root')\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media_root')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = config('EMAIL_US')\nEMAIL_HOST_PASSWORD = config('PASSWORD_US')",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media_root')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = config('EMAIL_US')\nEMAIL_HOST_PASSWORD = config('PASSWORD_US')\nJAZZMIN_SETTINGS = {",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = config('EMAIL_US')\nEMAIL_HOST_PASSWORD = config('PASSWORD_US')\nJAZZMIN_SETTINGS = {\n    \"site_title\": \"Tech Love v Admin\",\n    \"site_header\": \"Tech Love V\",\n    \"site_brand\": \"Tech Love V\",",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "EMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = config('EMAIL_US')\nEMAIL_HOST_PASSWORD = config('PASSWORD_US')\nJAZZMIN_SETTINGS = {\n    \"site_title\": \"Tech Love v Admin\",\n    \"site_header\": \"Tech Love V\",\n    \"site_brand\": \"Tech Love V\",\n    # \"site_logo\": \"img/svg/icon.svg\",",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "EMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = config('EMAIL_US')\nEMAIL_HOST_PASSWORD = config('PASSWORD_US')\nJAZZMIN_SETTINGS = {\n    \"site_title\": \"Tech Love v Admin\",\n    \"site_header\": \"Tech Love V\",\n    \"site_brand\": \"Tech Love V\",\n    # \"site_logo\": \"img/svg/icon.svg\",\n    \"login_logo\": None,",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST_USER = config('EMAIL_US')\nEMAIL_HOST_PASSWORD = config('PASSWORD_US')\nJAZZMIN_SETTINGS = {\n    \"site_title\": \"Tech Love v Admin\",\n    \"site_header\": \"Tech Love V\",\n    \"site_brand\": \"Tech Love V\",\n    # \"site_logo\": \"img/svg/icon.svg\",\n    \"login_logo\": None,\n    # Logo to use for login form in dark themes (defaults to login_logo)",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "EMAIL_HOST_USER = config('EMAIL_US')\nEMAIL_HOST_PASSWORD = config('PASSWORD_US')\nJAZZMIN_SETTINGS = {\n    \"site_title\": \"Tech Love v Admin\",\n    \"site_header\": \"Tech Love V\",\n    \"site_brand\": \"Tech Love V\",\n    # \"site_logo\": \"img/svg/icon.svg\",\n    \"login_logo\": None,\n    # Logo to use for login form in dark themes (defaults to login_logo)\n    \"login_logo_dark\": None,",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = config('PASSWORD_US')\nJAZZMIN_SETTINGS = {\n    \"site_title\": \"Tech Love v Admin\",\n    \"site_header\": \"Tech Love V\",\n    \"site_brand\": \"Tech Love V\",\n    # \"site_logo\": \"img/svg/icon.svg\",\n    \"login_logo\": None,\n    # Logo to use for login form in dark themes (defaults to login_logo)\n    \"login_logo_dark\": None,\n    # CSS classes that are applied to the logo above",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "JAZZMIN_SETTINGS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "JAZZMIN_SETTINGS = {\n    \"site_title\": \"Tech Love v Admin\",\n    \"site_header\": \"Tech Love V\",\n    \"site_brand\": \"Tech Love V\",\n    # \"site_logo\": \"img/svg/icon.svg\",\n    \"login_logo\": None,\n    # Logo to use for login form in dark themes (defaults to login_logo)\n    \"login_logo_dark\": None,\n    # CSS classes that are applied to the logo above\n    \"site_logo_classes\": \"img-circle\",",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_ALLOWED_TEMPLATE_PACKS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "CRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap5\"\nCRISPY_TEMPLATE_PACK = \"bootstrap5\"\nSTRIPE_PUBLIC_KEY = config('STRIPE_TEST_PUBLIC_KEY')\nSTRIPE_SECRET_KEY = config('STRIPE_TEST_SECRET_KEY')\nRAZOR_API_KEY=config('RAZOR_API_KEY')\nRAZOR_SECURITY_KEY=config('RAZOR_SECURITY_KEY')\n# Set the URL for the password reset confirmation link\nPASSWORD_RESET_CONFIRM_URL = reverse_lazy('user:password_reset_confirm')\n# Set the email subject and sender for the password reset email\nPASSWORD_RESET_EMAIL_SUBJECT = 'Reset your password'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = \"bootstrap5\"\nSTRIPE_PUBLIC_KEY = config('STRIPE_TEST_PUBLIC_KEY')\nSTRIPE_SECRET_KEY = config('STRIPE_TEST_SECRET_KEY')\nRAZOR_API_KEY=config('RAZOR_API_KEY')\nRAZOR_SECURITY_KEY=config('RAZOR_SECURITY_KEY')\n# Set the URL for the password reset confirmation link\nPASSWORD_RESET_CONFIRM_URL = reverse_lazy('user:password_reset_confirm')\n# Set the email subject and sender for the password reset email\nPASSWORD_RESET_EMAIL_SUBJECT = 'Reset your password'\nPASSWORD_RESET_EMAIL_SENDER = config('EMAIL_US')",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "STRIPE_PUBLIC_KEY",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "STRIPE_PUBLIC_KEY = config('STRIPE_TEST_PUBLIC_KEY')\nSTRIPE_SECRET_KEY = config('STRIPE_TEST_SECRET_KEY')\nRAZOR_API_KEY=config('RAZOR_API_KEY')\nRAZOR_SECURITY_KEY=config('RAZOR_SECURITY_KEY')\n# Set the URL for the password reset confirmation link\nPASSWORD_RESET_CONFIRM_URL = reverse_lazy('user:password_reset_confirm')\n# Set the email subject and sender for the password reset email\nPASSWORD_RESET_EMAIL_SUBJECT = 'Reset your password'\nPASSWORD_RESET_EMAIL_SENDER = config('EMAIL_US')",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "STRIPE_SECRET_KEY",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "STRIPE_SECRET_KEY = config('STRIPE_TEST_SECRET_KEY')\nRAZOR_API_KEY=config('RAZOR_API_KEY')\nRAZOR_SECURITY_KEY=config('RAZOR_SECURITY_KEY')\n# Set the URL for the password reset confirmation link\nPASSWORD_RESET_CONFIRM_URL = reverse_lazy('user:password_reset_confirm')\n# Set the email subject and sender for the password reset email\nPASSWORD_RESET_EMAIL_SUBJECT = 'Reset your password'\nPASSWORD_RESET_EMAIL_SENDER = config('EMAIL_US')",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "PASSWORD_RESET_CONFIRM_URL",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "PASSWORD_RESET_CONFIRM_URL = reverse_lazy('user:password_reset_confirm')\n# Set the email subject and sender for the password reset email\nPASSWORD_RESET_EMAIL_SUBJECT = 'Reset your password'\nPASSWORD_RESET_EMAIL_SENDER = config('EMAIL_US')",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "PASSWORD_RESET_EMAIL_SUBJECT",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "PASSWORD_RESET_EMAIL_SUBJECT = 'Reset your password'\nPASSWORD_RESET_EMAIL_SENDER = config('EMAIL_US')",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "PASSWORD_RESET_EMAIL_SENDER",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "PASSWORD_RESET_EMAIL_SENDER = config('EMAIL_US')",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "project.urls",
        "description": "project.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls, name='admin'),\n    path('delivery/', include('delivery.urls', namespace='delivery')),\n    path('shop/', include('shop.urls', namespace='shop')),\n    path('aboutus/', aboutus, name='aboutus'),\n    path('aboutus/<slug>', Author.as_view(), name='author'),\n    path('', include('user.urls', namespace='user')),\n    path('reset_password/', MyPasswordResetView.as_view(), name='mypasswordresetview'),\n    path('reset_password/done/', MyPasswordResetDoneView.as_view(), name='mypasswordresetdoneview'),\n    path('reset/<uidb64>/<token>/', auth_views.PasswordResetConfirmView.as_view(template_name='registration/password_reset_confirm.html'), name='password_reset_confirm'),",
        "detail": "project.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "project.wsgi",
        "description": "project.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "project.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0001_initial",
        "description": "shop.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category', models.CharField(max_length=25, unique=True)),",
        "detail": "shop.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0002_item_brand_name_company_comments_item_comments_and_more",
        "description": "shop.migrations.0002_item_brand_name_company_comments_item_comments_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('shop', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='item',\n            name='brand_Name',\n            field=models.CharField(default='Not defined', max_length=20),",
        "detail": "shop.migrations.0002_item_brand_name_company_comments_item_comments_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0003_address_payment_orderitem_order",
        "description": "shop.migrations.0003_address_payment_orderitem_order",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('shop', '0002_item_brand_name_company_comments_item_comments_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Address',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "shop.migrations.0003_address_payment_orderitem_order",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0004_remove_company_owner_name_company_user",
        "description": "shop.migrations.0004_remove_company_owner_name_company_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('shop', '0003_address_payment_orderitem_order'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='company',\n            name='owner_name',\n        ),",
        "detail": "shop.migrations.0004_remove_company_owner_name_company_user",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0005_alter_company_coupon",
        "description": "shop.migrations.0005_alter_company_coupon",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0004_remove_company_owner_name_company_user'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='company',\n            name='coupon',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='shop.coupon'),\n        ),",
        "detail": "shop.migrations.0005_alter_company_coupon",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0006_alter_item_comments",
        "description": "shop.migrations.0006_alter_item_comments",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0005_alter_company_coupon'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='item',\n            name='comments',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='shop.comments'),\n        ),",
        "detail": "shop.migrations.0006_alter_item_comments",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0007_aboutus_contactform_alter_category_image",
        "description": "shop.migrations.0007_aboutus_contactform_alter_category_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0006_alter_item_comments'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AboutUs',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('user', models.CharField(max_length=100)),",
        "detail": "shop.migrations.0007_aboutus_contactform_alter_category_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0008_refund",
        "description": "shop.migrations.0008_refund",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0007_aboutus_contactform_alter_category_image'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Refund',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('reason', models.TextField()),",
        "detail": "shop.migrations.0008_refund",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0009_order_company_orderitem_company",
        "description": "shop.migrations.0009_order_company_orderitem_company",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0008_refund'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='order',\n            name='company',\n            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='shop.company'),\n            preserve_default=False,",
        "detail": "shop.migrations.0009_order_company_orderitem_company",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0010_alter_orderitem_company",
        "description": "shop.migrations.0010_alter_orderitem_company",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0009_order_company_orderitem_company'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='orderitem',\n            name='company',\n            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='shop.company'),\n        ),",
        "detail": "shop.migrations.0010_alter_orderitem_company",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0011_remove_orderitem_company",
        "description": "shop.migrations.0011_remove_orderitem_company",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0010_alter_orderitem_company'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='orderitem',\n            name='company',\n        ),\n    ]",
        "detail": "shop.migrations.0011_remove_orderitem_company",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0012_remove_order_company",
        "description": "shop.migrations.0012_remove_order_company",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0011_remove_orderitem_company'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='order',\n            name='company',\n        ),\n    ]",
        "detail": "shop.migrations.0012_remove_order_company",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0013_order_company_orderitem_company",
        "description": "shop.migrations.0013_order_company_orderitem_company",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0012_remove_order_company'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='order',\n            name='company',\n            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='shop.company'),\n        ),",
        "detail": "shop.migrations.0013_order_company_orderitem_company",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0014_alter_order_company_alter_orderitem_company",
        "description": "shop.migrations.0014_alter_order_company_alter_orderitem_company",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0013_order_company_orderitem_company'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='order',\n            name='company',\n            field=models.ForeignKey(default='Tech Love V', on_delete=django.db.models.deletion.CASCADE, to='shop.company'),\n        ),",
        "detail": "shop.migrations.0014_alter_order_company_alter_orderitem_company",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0015_subcategory_alter_item_category",
        "description": "shop.migrations.0015_subcategory_alter_item_category",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0014_alter_order_company_alter_orderitem_company'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='subcategory',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=25, unique=True)),",
        "detail": "shop.migrations.0015_subcategory_alter_item_category",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0016_remove_subcategory_main_subcategory_main",
        "description": "shop.migrations.0016_remove_subcategory_main_subcategory_main",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0015_subcategory_alter_item_category'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='subcategory',\n            name='main',\n        ),\n        migrations.AddField(",
        "detail": "shop.migrations.0016_remove_subcategory_main_subcategory_main",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0017_item_subcategory_alter_item_category",
        "description": "shop.migrations.0017_item_subcategory_alter_item_category",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0016_remove_subcategory_main_subcategory_main'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='item',\n            name='subcategory',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='shop.subcategory'),\n        ),",
        "detail": "shop.migrations.0017_item_subcategory_alter_item_category",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0018_alter_comments_dislike_alter_comments_images_and_more",
        "description": "shop.migrations.0018_alter_comments_dislike_alter_comments_images_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0017_item_subcategory_alter_item_category'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='comments',\n            name='dislike',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "shop.migrations.0018_alter_comments_dislike_alter_comments_images_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0019_remove_item_subcategory_item_subcategory",
        "description": "shop.migrations.0019_remove_item_subcategory_item_subcategory",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0018_alter_comments_dislike_alter_comments_images_and_more'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='item',\n            name='subcategory',\n        ),\n        migrations.AddField(",
        "detail": "shop.migrations.0019_remove_item_subcategory_item_subcategory",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0020_alter_item_company",
        "description": "shop.migrations.0020_alter_item_company",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0019_remove_item_subcategory_item_subcategory'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='item',\n            name='company',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='shop.company'),\n        ),",
        "detail": "shop.migrations.0020_alter_item_company",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0021_alter_item_image",
        "description": "shop.migrations.0021_alter_item_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0020_alter_item_company'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='item',\n            name='image',\n            field=models.ImageField(default='img/image_not_available.png', upload_to='Porduct'),\n        ),",
        "detail": "shop.migrations.0021_alter_item_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0022_alter_item_image",
        "description": "shop.migrations.0022_alter_item_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0021_alter_item_image'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='item',\n            name='image',\n            field=models.ImageField(default='image_not_available.png', upload_to='Porduct'),\n        ),",
        "detail": "shop.migrations.0022_alter_item_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0023_alter_item_image",
        "description": "shop.migrations.0023_alter_item_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0022_alter_item_image'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='item',\n            name='image',\n            field=models.ImageField(default='../static/img/image_not_available.png', upload_to='Porduct'),\n        ),",
        "detail": "shop.migrations.0023_alter_item_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0024_alter_item_subcategory_alter_order_company_and_more",
        "description": "shop.migrations.0024_alter_item_subcategory_alter_order_company_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0023_alter_item_image'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='item',\n            name='subcategory',\n            field=models.ManyToManyField(blank=True, to='shop.subcategory'),\n        ),",
        "detail": "shop.migrations.0024_alter_item_subcategory_alter_order_company_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0025_alter_order_company_alter_orderitem_company",
        "description": "shop.migrations.0025_alter_order_company_alter_orderitem_company",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0024_alter_item_subcategory_alter_order_company_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='order',\n            name='company',\n            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='shop.company'),\n        ),",
        "detail": "shop.migrations.0025_alter_order_company_alter_orderitem_company",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0026_alter_order_company_alter_orderitem_company",
        "description": "shop.migrations.0026_alter_order_company_alter_orderitem_company",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0025_alter_order_company_alter_orderitem_company'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='order',\n            name='company',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.company'),\n        ),",
        "detail": "shop.migrations.0026_alter_order_company_alter_orderitem_company",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0027_remove_orderitem_company",
        "description": "shop.migrations.0027_remove_orderitem_company",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0026_alter_order_company_alter_orderitem_company'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='orderitem',\n            name='company',\n        ),\n    ]",
        "detail": "shop.migrations.0027_remove_orderitem_company",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0028_remove_order_company",
        "description": "shop.migrations.0028_remove_order_company",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0027_remove_orderitem_company'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='order',\n            name='company',\n        ),\n    ]",
        "detail": "shop.migrations.0028_remove_order_company",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0029_item_date_published",
        "description": "shop.migrations.0029_item_date_published",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0028_remove_order_company'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='item',\n            name='date_published',\n            field=models.DateTimeField(default=datetime.datetime(2023, 4, 7, 5, 6, 57, 905040, tzinfo=datetime.timezone.utc)),\n        ),",
        "detail": "shop.migrations.0029_item_date_published",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0030_slide_alter_item_date_published",
        "description": "shop.migrations.0030_slide_alter_item_date_published",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0029_item_date_published'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Slide',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('caption1', models.CharField(max_length=100)),",
        "detail": "shop.migrations.0030_slide_alter_item_date_published",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0031_remove_company_no_emp_remove_company_no_product_and_more",
        "description": "shop.migrations.0031_remove_company_no_emp_remove_company_no_product_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0030_slide_alter_item_date_published'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='company',\n            name='no_emp',\n        ),\n        migrations.RemoveField(",
        "detail": "shop.migrations.0031_remove_company_no_emp_remove_company_no_product_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0032_alter_item_date_published_employee",
        "description": "shop.migrations.0032_alter_item_date_published_employee",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('shop', '0031_remove_company_no_emp_remove_company_no_product_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='item',\n            name='date_published',\n            field=models.DateTimeField(default=datetime.datetime(2023, 4, 7, 14, 11, 41, 804874, tzinfo=datetime.timezone.utc)),",
        "detail": "shop.migrations.0032_alter_item_date_published_employee",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0033_alter_item_date_published",
        "description": "shop.migrations.0033_alter_item_date_published",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0032_alter_item_date_published_employee'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='item',\n            name='date_published',\n            field=models.DateTimeField(auto_now_add=True),\n        ),",
        "detail": "shop.migrations.0033_alter_item_date_published",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0034_remove_company_coupon_category_sales_coupon_company",
        "description": "shop.migrations.0034_remove_company_coupon_category_sales_coupon_company",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0033_alter_item_date_published'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='company',\n            name='coupon',\n        ),\n        migrations.AddField(",
        "detail": "shop.migrations.0034_remove_company_coupon_category_sales_coupon_company",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0035_item_users_wishlist",
        "description": "shop.migrations.0035_item_users_wishlist",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('shop', '0034_remove_company_coupon_category_sales_coupon_company'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='item',\n            name='users_wishlist',\n            field=models.ManyToManyField(blank=True, related_name='user_wishlist', to=settings.AUTH_USER_MODEL),",
        "detail": "shop.migrations.0035_item_users_wishlist",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "shop.migrations.0036_passwordresetrequest",
        "description": "shop.migrations.0036_passwordresetrequest",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('shop', '0035_item_users_wishlist'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='PasswordResetRequest',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "shop.migrations.0036_passwordresetrequest",
        "documentation": {}
    },
    {
        "label": "OrderAdmin",
        "kind": 6,
        "importPath": "shop.admin",
        "description": "shop.admin",
        "peekOfCode": "class OrderAdmin(admin.ModelAdmin):\n    list_display = ['user',\n                    'ordered',\n                    'being_delivered',\n                    'received',\n                    'refund_requested',\n                    'refund_granted',\n                    'shipping_address',\n                    'billing_address',\n                    'payment',",
        "detail": "shop.admin",
        "documentation": {}
    },
    {
        "label": "AddressAdmin",
        "kind": 6,
        "importPath": "shop.admin",
        "description": "shop.admin",
        "peekOfCode": "class AddressAdmin(admin.ModelAdmin):\n    list_display = [\n        'user',\n        'street_address',\n        'apartment_address',\n        'country',\n        'zip',\n        'address_type',\n        'default'\n    ]",
        "detail": "shop.admin",
        "documentation": {}
    },
    {
        "label": "ItemAdmin",
        "kind": 6,
        "importPath": "shop.admin",
        "description": "shop.admin",
        "peekOfCode": "class ItemAdmin(admin.ModelAdmin):\n    list_display = [\n        'title',\n        'category',\n        'quantity',\n        'is_active',\n    ]\n    list_filter = ['title', 'category']\n    search_fields = ['title', 'category']\n    prepopulated_fields = {\"slug\": (\"title\",)}",
        "detail": "shop.admin",
        "documentation": {}
    },
    {
        "label": "CategoryAdmin",
        "kind": 6,
        "importPath": "shop.admin",
        "description": "shop.admin",
        "peekOfCode": "class CategoryAdmin(admin.ModelAdmin):\n    list_display = [\n        'category',\n        'is_active'\n    ]\n    list_filter = ['category', 'is_active']\n    search_fields = ['category', 'is_active']\n    prepopulated_fields = {\"slug\": (\"category\",)}\nadmin.site.register(Item,ItemAdmin)\nadmin.site.register(AboutUs)",
        "detail": "shop.admin",
        "documentation": {}
    },
    {
        "label": "make_refund_accepted",
        "kind": 2,
        "importPath": "shop.admin",
        "description": "shop.admin",
        "peekOfCode": "def make_refund_accepted(modeladmin, request, queryset):\n    queryset.update(refund_requested=False, refund_granted=True)\nmake_refund_accepted.short_description = 'Update orders to refund granted'\nclass OrderAdmin(admin.ModelAdmin):\n    list_display = ['user',\n                    'ordered',\n                    'being_delivered',\n                    'received',\n                    'refund_requested',\n                    'refund_granted',",
        "detail": "shop.admin",
        "documentation": {}
    },
    {
        "label": "copy_items",
        "kind": 2,
        "importPath": "shop.admin",
        "description": "shop.admin",
        "peekOfCode": "def copy_items(modeladmin, request, queryset):\n    for object in queryset:\n        object.id = None\n        object.save()\ncopy_items.short_description = 'Copy Items'\nclass ItemAdmin(admin.ModelAdmin):\n    list_display = [\n        'title',\n        'category',\n        'quantity',",
        "detail": "shop.admin",
        "documentation": {}
    },
    {
        "label": "make_refund_accepted.short_description",
        "kind": 5,
        "importPath": "shop.admin",
        "description": "shop.admin",
        "peekOfCode": "make_refund_accepted.short_description = 'Update orders to refund granted'\nclass OrderAdmin(admin.ModelAdmin):\n    list_display = ['user',\n                    'ordered',\n                    'being_delivered',\n                    'received',\n                    'refund_requested',\n                    'refund_granted',\n                    'shipping_address',\n                    'billing_address',",
        "detail": "shop.admin",
        "documentation": {}
    },
    {
        "label": "copy_items.short_description",
        "kind": 5,
        "importPath": "shop.admin",
        "description": "shop.admin",
        "peekOfCode": "copy_items.short_description = 'Copy Items'\nclass ItemAdmin(admin.ModelAdmin):\n    list_display = [\n        'title',\n        'category',\n        'quantity',\n        'is_active',\n    ]\n    list_filter = ['title', 'category']\n    search_fields = ['title', 'category']",
        "detail": "shop.admin",
        "documentation": {}
    },
    {
        "label": "ShopConfig",
        "kind": 6,
        "importPath": "shop.apps",
        "description": "shop.apps",
        "peekOfCode": "class ShopConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'shop'",
        "detail": "shop.apps",
        "documentation": {}
    },
    {
        "label": "unauthenticated_user",
        "kind": 2,
        "importPath": "shop.decorators",
        "description": "shop.decorators",
        "peekOfCode": "def unauthenticated_user(view_func):\n    def wrapper_func(request, *args, **kwargs):\n        if request.user.is_authenticated:\n            return redirect('shop:shop-index')\n        else:\n            return view_func(request,*args, **kwargs)\n    return wrapper_func\ndef allowed_users(allowed_roles=[]):\n    def decorator(view_func):\n        def wrapper_func(request, *args, **kwargs):",
        "detail": "shop.decorators",
        "documentation": {}
    },
    {
        "label": "allowed_users",
        "kind": 2,
        "importPath": "shop.decorators",
        "description": "shop.decorators",
        "peekOfCode": "def allowed_users(allowed_roles=[]):\n    def decorator(view_func):\n        def wrapper_func(request, *args, **kwargs):\n            group= None\n            if request.user.groups.exists():\n                group=request.user.groups.all()[0].name\n            if group in allowed_roles:\n                return view_func(request,*args, **kwargs)\n            else:\n                return render(request",
        "detail": "shop.decorators",
        "documentation": {}
    },
    {
        "label": "ProductForm",
        "kind": 6,
        "importPath": "shop.forms",
        "description": "shop.forms",
        "peekOfCode": "class ProductForm(forms.ModelForm):\n    class Meta:\n        model = Product\n        fields = '__all__'\nclass OrderForm(forms.ModelForm):\n    class Meta:\n        model = Order\n        fields = ['user', 'items']\nclass CreateUserForm(UserCreationForm):\n    company_name=forms.CharField(max_length=20)",
        "detail": "shop.forms",
        "documentation": {}
    },
    {
        "label": "OrderForm",
        "kind": 6,
        "importPath": "shop.forms",
        "description": "shop.forms",
        "peekOfCode": "class OrderForm(forms.ModelForm):\n    class Meta:\n        model = Order\n        fields = ['user', 'items']\nclass CreateUserForm(UserCreationForm):\n    company_name=forms.CharField(max_length=20)\n    class Meta:\n        model=User\n        fields=['username','first_name','last_name','email','password1','password2','company_name']",
        "detail": "shop.forms",
        "documentation": {}
    },
    {
        "label": "CreateUserForm",
        "kind": 6,
        "importPath": "shop.forms",
        "description": "shop.forms",
        "peekOfCode": "class CreateUserForm(UserCreationForm):\n    company_name=forms.CharField(max_length=20)\n    class Meta:\n        model=User\n        fields=['username','first_name','last_name','email','password1','password2','company_name']",
        "detail": "shop.forms",
        "documentation": {}
    },
    {
        "label": "Address",
        "kind": 6,
        "importPath": "shop.models",
        "description": "shop.models",
        "peekOfCode": "class Address(models.Model):\n    user = models.ForeignKey(User,\n                             on_delete=models.CASCADE)\n    street_address = models.CharField(max_length=100)\n    apartment_address = models.CharField(max_length=100)\n    country = CountryField(multiple=False)\n    zip = models.CharField(max_length=100)\n    address_type = models.CharField(max_length=1, choices=ADDRESS_CHOICES)\n    default = models.BooleanField(default=False)\n    def __str__(self):",
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "kind": 6,
        "importPath": "shop.models",
        "description": "shop.models",
        "peekOfCode": "class Payment(models.Model):\n    stripe_charge_id = models.CharField(max_length=50)\n    user = models.ForeignKey(User,\n                             on_delete=models.SET_NULL, blank=True, null=True)\n    amount = models.FloatField()\n    timestamp = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return self.user.username\nclass comments(models.Model):\n    user=models.ForeignKey(User,on_delete=models.CASCADE)",
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "comments",
        "kind": 6,
        "importPath": "shop.models",
        "description": "shop.models",
        "peekOfCode": "class comments(models.Model):\n    user=models.ForeignKey(User,on_delete=models.CASCADE)\n    comment=models.TextField(null=True)\n    images=models.ImageField(upload_to='comment',null=True,blank=True)\n    rating=models.FloatField(null=True)\n    like=models.BooleanField(default=False)\n    dislike=models.BooleanField(default=False)\nclass company(models.Model):\n    name=models.CharField(max_length=20)\n    user = models.OneToOneField(",
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "company",
        "kind": 6,
        "importPath": "shop.models",
        "description": "shop.models",
        "peekOfCode": "class company(models.Model):\n    name=models.CharField(max_length=20)\n    user = models.OneToOneField(\n        User, on_delete=models.CASCADE)\n    total_sales=models.FloatField(default=0)\n    pending_order=models.FloatField(default=0)\n    confirmed_order=models.FloatField(default=0)\n    def __str__(self):\n        return self.name\nclass Coupon(models.Model):",
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "Coupon",
        "kind": 6,
        "importPath": "shop.models",
        "description": "shop.models",
        "peekOfCode": "class Coupon(models.Model):\n    code = models.CharField(max_length=15)\n    amount = models.FloatField()\n    minCartValue = models.FloatField(default=True)\n    company = models.ForeignKey( company ,on_delete=models.CASCADE,default=1)\n    def __str__(self):\n        return self.code\nclass Item(models.Model):\n    company=models.ForeignKey(company,on_delete=models.CASCADE, null=True)\n    title = models.CharField(max_length=100, null=True)",
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "shop.models",
        "description": "shop.models",
        "peekOfCode": "class Item(models.Model):\n    company=models.ForeignKey(company,on_delete=models.CASCADE, null=True)\n    title = models.CharField(max_length=100, null=True)\n    brand_Name=models.CharField(default='Not defined', max_length=20)\n    price = models.FloatField(null=True)\n    quantity = models.FloatField(null=True)\n    discount_price = models.FloatField(blank=True, null=True)\n    category = models.ForeignKey(\n        'category', on_delete=models.SET_NULL, blank=True, null=True)\n    subcategory = models.ManyToManyField(",
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "category",
        "kind": 6,
        "importPath": "shop.models",
        "description": "shop.models",
        "peekOfCode": "class category(models.Model):\n    category = models.CharField(max_length=25, unique=True)\n    slug = models.SlugField(unique=True)\n    description = models.TextField()\n    image = models.ImageField(upload_to='Category', null=True)\n    sales=models.IntegerField(default=0)\n    is_active = models.BooleanField(default=True)\n    def __str__(self):\n        return self.category\nclass subcategory(models.Model):",
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "subcategory",
        "kind": 6,
        "importPath": "shop.models",
        "description": "shop.models",
        "peekOfCode": "class subcategory(models.Model):\n    main=models.ManyToManyField(category)\n    name=models.CharField(max_length=25, unique=True)\n    slug=models.SlugField(unique=True)\n    is_active=models.BooleanField(default=True)\n    def __str__(self):\n        return self.name\nclass PasswordResetRequest(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    token = models.CharField(max_length=100, unique=True)",
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "PasswordResetRequest",
        "kind": 6,
        "importPath": "shop.models",
        "description": "shop.models",
        "peekOfCode": "class PasswordResetRequest(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    token = models.CharField(max_length=100, unique=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    is_expired = models.BooleanField(default=False)\nclass Slide(models.Model):\n    caption1 = models.CharField(max_length=100)\n    caption2 = models.CharField(max_length=100)\n    link = models.CharField(max_length=100)\n    image = models.ImageField(help_text=\"Size: 1920x570\")",
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "Slide",
        "kind": 6,
        "importPath": "shop.models",
        "description": "shop.models",
        "peekOfCode": "class Slide(models.Model):\n    caption1 = models.CharField(max_length=100)\n    caption2 = models.CharField(max_length=100)\n    link = models.CharField(max_length=100)\n    image = models.ImageField(help_text=\"Size: 1920x570\")\n    is_active = models.BooleanField(default=True)\n    def __str__(self):\n        return \"{} - {}\".format(self.caption1, self.caption2)\nclass OrderItem(models.Model):\n    user = models.ForeignKey(User,",
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "OrderItem",
        "kind": 6,
        "importPath": "shop.models",
        "description": "shop.models",
        "peekOfCode": "class OrderItem(models.Model):\n    user = models.ForeignKey(User,\n                             on_delete=models.CASCADE)\n    ordered = models.BooleanField(default=False)\n    item = models.ForeignKey(Item, on_delete=models.CASCADE)\n    quantity = models.IntegerField(default=1)\n    def __str__(self):\n        return f\"{self.quantity} of {self.item.title}\"\n    def get_total_item_price(self):\n        return self.quantity * self.item.price",
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "shop.models",
        "description": "shop.models",
        "peekOfCode": "class Order(models.Model):\n    user = models.ForeignKey(User,\n                             on_delete=models.CASCADE)\n    ref_code = models.CharField(max_length=20, blank=True, null=True)\n    items = models.ManyToManyField(OrderItem)\n    start_date = models.DateTimeField(auto_now_add=True)\n    ordered_date = models.DateTimeField()\n    ordered = models.BooleanField(default=False)\n    shipping_address = models.ForeignKey(\n        'Address', related_name='shipping_address', on_delete=models.SET_NULL, blank=True, null=True)",
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "AboutUs",
        "kind": 6,
        "importPath": "shop.models",
        "description": "shop.models",
        "peekOfCode": "class AboutUs(models.Model):\n    user = models.CharField(max_length=100)\n    about_us = models.TextField()\n    # resume= forms.FileField(widget=forms.ClearableFileInput(attrs={'multiple': True}))\n    slug = models.SlugField(unique=True)\n    work = models.CharField(max_length=20)\n    email = models.EmailField()\n    image = models.ImageField(upload_to='authorImg', blank=True)\n    resume = models.FileField(upload_to='resume', blank=True)\n    linkedin_url = models.CharField(max_length=255, null=True, blank=True)",
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "ContactForm",
        "kind": 6,
        "importPath": "shop.models",
        "description": "shop.models",
        "peekOfCode": "class ContactForm(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    subject = models.TextField()\n    def __str__(self):\n        return self.name\n    class Meta:\n        verbose_name_plural = 'Contact Form'\nclass Refund(models.Model):\n    order = models.ForeignKey(Order, on_delete=models.CASCADE)",
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "Refund",
        "kind": 6,
        "importPath": "shop.models",
        "description": "shop.models",
        "peekOfCode": "class Refund(models.Model):\n    order = models.ForeignKey(Order, on_delete=models.CASCADE)\n    reason = models.TextField()\n    accepted = models.BooleanField(default=False)\n    email = models.EmailField()\n    def __str__(self):\n        return f\"{self.pk}\"\nclass Employee(models.Model):\n    user = models.OneToOneField(\n        User, on_delete=models.CASCADE)",
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "Employee",
        "kind": 6,
        "importPath": "shop.models",
        "description": "shop.models",
        "peekOfCode": "class Employee(models.Model):\n    user = models.OneToOneField(\n        User, on_delete=models.CASCADE)\n    company=models.ForeignKey(company, on_delete=models.CASCADE)\n    salary=models.IntegerField(default=10000)",
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "LABEL_CHOICES",
        "kind": 5,
        "importPath": "shop.models",
        "description": "shop.models",
        "peekOfCode": "LABEL_CHOICES = (\n    ('P', 'primary'),\n    ('S', 'secondary'),\n    ('D', 'danger')\n)\nADDRESS_CHOICES = (\n    ('B', 'Billing'),\n    ('S', 'Shipping'),\n)\nclass Address(models.Model):",
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "ADDRESS_CHOICES",
        "kind": 5,
        "importPath": "shop.models",
        "description": "shop.models",
        "peekOfCode": "ADDRESS_CHOICES = (\n    ('B', 'Billing'),\n    ('S', 'Shipping'),\n)\nclass Address(models.Model):\n    user = models.ForeignKey(User,\n                             on_delete=models.CASCADE)\n    street_address = models.CharField(max_length=100)\n    apartment_address = models.CharField(max_length=100)\n    country = CountryField(multiple=False)",
        "detail": "shop.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "shop.urls",
        "description": "shop.urls",
        "peekOfCode": "app_name = 'shop'\nfrom django.contrib import admin\nfrom django.urls import path,include\n# from django.contrib.auth import views as auth_view\nfrom .views import registerPage,index,employee,products,OrderView,loginPage,logoutUser,product_delete,product_detail,product_edit,employee,employee_detail,ItemDetailView\nurlpatterns = [\n    path('', index, name='shop-index'),\n    path('products/', products, name='dashboard-products'),\n    path('employees/', employee, name='shop-employee'),\n    path('products/delete/<int:pk>/', product_delete,",
        "detail": "shop.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "shop.urls",
        "description": "shop.urls",
        "peekOfCode": "urlpatterns = [\n    path('', index, name='shop-index'),\n    path('products/', products, name='dashboard-products'),\n    path('employees/', employee, name='shop-employee'),\n    path('products/delete/<int:pk>/', product_delete,\n         name='dashboard-products-delete'),\n    path('products/detail/<int:pk>/', product_detail,\n         name='dashboard-products-detail'),\n    path('products/edit/<int:pk>/', product_edit,\n         name='dashboard-products-edit'),",
        "detail": "shop.urls",
        "documentation": {}
    },
    {
        "label": "ItemDetailView",
        "kind": 6,
        "importPath": "shop.views",
        "description": "shop.views",
        "peekOfCode": "class ItemDetailView(DetailView):\n    model = Order\n    template_name = \"shop/dashboard/order_view.html\"\nclass OrderView(LoginRequiredMixin, View):\n    def get(self, *args, **kwargs):\n        try:\n            company_id = Company.objects.get(user=self.request.user)\n            employee = Employee.objects.all().filter(company=company_id.id)\n            customer_count = employee.count()\n            product = Product.objects.all().filter(company=company_id.id)",
        "detail": "shop.views",
        "documentation": {}
    },
    {
        "label": "OrderView",
        "kind": 6,
        "importPath": "shop.views",
        "description": "shop.views",
        "peekOfCode": "class OrderView(LoginRequiredMixin, View):\n    def get(self, *args, **kwargs):\n        try:\n            company_id = Company.objects.get(user=self.request.user)\n            employee = Employee.objects.all().filter(company=company_id.id)\n            customer_count = employee.count()\n            product = Product.objects.all().filter(company=company_id.id)\n            product_count = product.count()\n            order = Order.objects.all().filter(ordered=True , being_delivered=False )\n            order_count = order.count()",
        "detail": "shop.views",
        "documentation": {}
    },
    {
        "label": "get_months_between_dates",
        "kind": 2,
        "importPath": "shop.views",
        "description": "shop.views",
        "peekOfCode": "def get_months_between_dates(start_date, end_date):\n    months = []\n    while start_date <= end_date:\n        months.append(start_date.strftime(\"%B\"))\n        start_date += relativedelta(months=1)\n    return months\n@login_required(login_url='shop:account_login')\n@allowed_users(allowed_roles=['shop', 'employee'])\ndef index(request):\n    product = Product.objects.all()",
        "detail": "shop.views",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "shop.views",
        "description": "shop.views",
        "peekOfCode": "def index(request):\n    product = Product.objects.all()\n    group=request.user.groups.all()[0].name\n    if group == 'employee':\n        emp_id=Employee.objects.get(user=request.user)\n        company_id=Company.objects.get(id=emp_id.company.id)\n    else:\n        company_id = Company.objects.get(user=request.user)\n    product = Product.objects.all().filter(company=company_id.id)\n    product_count = product.count()",
        "detail": "shop.views",
        "documentation": {}
    },
    {
        "label": "products",
        "kind": 2,
        "importPath": "shop.views",
        "description": "shop.views",
        "peekOfCode": "def products(request):\n    product = Product.objects.all()\n    group=request.user.groups.all()[0].name\n    if group == 'employee':\n        emp_id=Employee.objects.get(user=request.user)\n        company_id=Company.objects.get(id=emp_id.company.id)\n    else:\n        company_id = Company.objects.get(user=request.user)\n    product = Product.objects.all().filter(company=company_id.id)\n    product_count = product.count()",
        "detail": "shop.views",
        "documentation": {}
    },
    {
        "label": "product_detail",
        "kind": 2,
        "importPath": "shop.views",
        "description": "shop.views",
        "peekOfCode": "def product_detail(request, pk):\n    item = Product.objects.get(id=pk)\n    context = {\n        'item': item,\n    }\n    return render(request, 'shop/dashboard/products_detail.html', context)\n@login_required(login_url='shop:account_login')\n@allowed_users(allowed_roles=['shop'])\ndef employee(request):\n    company_id = Company.objects.get(user=request.user)",
        "detail": "shop.views",
        "documentation": {}
    },
    {
        "label": "employee",
        "kind": 2,
        "importPath": "shop.views",
        "description": "shop.views",
        "peekOfCode": "def employee(request):\n    company_id = Company.objects.get(user=request.user)\n    employee = Employee.objects.all().filter(company=company_id.id)\n    customer_count = employee.count()\n    product = Product.objects.all().filter(company=company_id.id)\n    product_count = product.count()\n    order = Order.objects.all().filter(ordered=True , being_delivered=False )\n    order_count = order.count()\n    context = {\n        'order': order,",
        "detail": "shop.views",
        "documentation": {}
    },
    {
        "label": "employee_detail",
        "kind": 2,
        "importPath": "shop.views",
        "description": "shop.views",
        "peekOfCode": "def employee_detail(request, pk):\n    company_id = Company.objects.get(user=request.user)\n    employee = Employee.objects.all().filter(company=company_id.id)    \n    customer_count = employee.count()\n    product = Product.objects.all().filter(company=company_id.id)\n    product_count = product.count()\n    order = Order.objects.all().filter(ordered=True , being_delivered=False )\n    order_count = order.count()\n    customers = Employee.objects.get(id=pk)\n    context = {",
        "detail": "shop.views",
        "documentation": {}
    },
    {
        "label": "product_edit",
        "kind": 2,
        "importPath": "shop.views",
        "description": "shop.views",
        "peekOfCode": "def product_edit(request, pk):\n    item = get_object_or_404(Product, id=pk)\n    if request.method == 'POST':\n        form = ProductForm(request.POST, instance=item)\n        if form.is_valid():\n            obj = form.save(commit=False)\n            obj.save()\n            return redirect(\"shop:dashboard-products\")\n    else:\n        form = ProductForm(instance=item)",
        "detail": "shop.views",
        "documentation": {}
    },
    {
        "label": "product_add",
        "kind": 2,
        "importPath": "shop.views",
        "description": "shop.views",
        "peekOfCode": "def product_add(request):\n    if request.method == 'POST':\n        form = ProductForm(request.POST)\n        if form.is_valid():\n            obj = form.save()\n            obj.save()\n            return redirect(\"shop:dashboard-products\")\n    else:\n        form = ProductForm\n    context = {",
        "detail": "shop.views",
        "documentation": {}
    },
    {
        "label": "product_delete",
        "kind": 2,
        "importPath": "shop.views",
        "description": "shop.views",
        "peekOfCode": "def product_delete(request, pk):\n    item = Product.objects.get(id=pk)\n    if request.method == 'POST':\n        item.delete()\n        return redirect('shop:dashboard-products')\n    context = {\n        'item': item\n    }\n    return render(request, 'shop/dashboard/products_delete.html', context)\nclass ItemDetailView(DetailView):",
        "detail": "shop.views",
        "documentation": {}
    },
    {
        "label": "registerPage",
        "kind": 2,
        "importPath": "shop.views",
        "description": "shop.views",
        "peekOfCode": "def registerPage(request):\n    form = CreateUserForm\n    company = Company()\n    if request.method == 'POST':\n        form = CreateUserForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            username = form.cleaned_data.get('username')\n            group = Group.objects.get(name='shop')\n            user.groups.add(group)",
        "detail": "shop.views",
        "documentation": {}
    },
    {
        "label": "loginPage",
        "kind": 2,
        "importPath": "shop.views",
        "description": "shop.views",
        "peekOfCode": "def loginPage(request):\n    if request.method == 'POST':\n        username = request.POST.get('username')\n        password = request.POST.get('password')\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            login(request, user)\n            return redirect('shop:shop-index')\n        else:\n            messages.info(request, 'username or password is incorrect')",
        "detail": "shop.views",
        "documentation": {}
    },
    {
        "label": "logoutUser",
        "kind": 2,
        "importPath": "shop.views",
        "description": "shop.views",
        "peekOfCode": "def logoutUser(request):\n    logout(request)\n    return redirect('shop:account_login')",
        "detail": "shop.views",
        "documentation": {}
    },
    {
        "label": "FontError",
        "kind": 6,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "peekOfCode": "class FontError(Exception):\n    \"\"\"Error related to font handling\"\"\"\n    pass\ndef multichar(str):\n    vals = struct.unpack('4B', str[:4])\n    return (vals[0] << 24) + (vals[1] << 16) + (vals[2] << 8) + vals[3]\ndef multicharval(v):\n    return struct.pack('4B', (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF)\nclass EOT:\n    EOT_VERSION = 0x00020001",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "documentation": {}
    },
    {
        "label": "EOT",
        "kind": 6,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "peekOfCode": "class EOT:\n    EOT_VERSION = 0x00020001\n    EOT_MAGIC_NUMBER = 0x504c\n    EOT_DEFAULT_CHARSET = 0x01\n    EOT_FAMILY_NAME_INDEX = 0    # order of names in variable portion of EOT header\n    EOT_STYLE_NAME_INDEX = 1\n    EOT_VERSION_NAME_INDEX = 2\n    EOT_FULL_NAME_INDEX = 3\n    EOT_NUM_NAMES = 4\n    EOT_HEADER_PACK = '<4L10B2BL2H7L18x'",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "documentation": {}
    },
    {
        "label": "OpenType",
        "kind": 6,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "peekOfCode": "class OpenType:\n    SFNT_CFF = multichar('OTTO')            # Postscript CFF SFNT version\n    SFNT_TRUE = 0x10000                     # Standard TrueType version\n    SFNT_APPLE = multichar('true')          # Apple TrueType version\n    SFNT_UNPACK = '>I4H'\n    TABLE_DIR_UNPACK = '>4I'\n    TABLE_HEAD = multichar('head')          # TrueType table tags\n    TABLE_NAME = multichar('name')\n    TABLE_OS2 = multichar('OS/2')\n    TABLE_GLYF = multichar('glyf')",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "documentation": {}
    },
    {
        "label": "multichar",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "peekOfCode": "def multichar(str):\n    vals = struct.unpack('4B', str[:4])\n    return (vals[0] << 24) + (vals[1] << 16) + (vals[2] << 8) + vals[3]\ndef multicharval(v):\n    return struct.pack('4B', (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF)\nclass EOT:\n    EOT_VERSION = 0x00020001\n    EOT_MAGIC_NUMBER = 0x504c\n    EOT_DEFAULT_CHARSET = 0x01\n    EOT_FAMILY_NAME_INDEX = 0    # order of names in variable portion of EOT header",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "documentation": {}
    },
    {
        "label": "multicharval",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "peekOfCode": "def multicharval(v):\n    return struct.pack('4B', (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF)\nclass EOT:\n    EOT_VERSION = 0x00020001\n    EOT_MAGIC_NUMBER = 0x504c\n    EOT_DEFAULT_CHARSET = 0x01\n    EOT_FAMILY_NAME_INDEX = 0    # order of names in variable portion of EOT header\n    EOT_STYLE_NAME_INDEX = 1\n    EOT_VERSION_NAME_INDEX = 2\n    EOT_FULL_NAME_INDEX = 3",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "documentation": {}
    },
    {
        "label": "eotname",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "peekOfCode": "def eotname(ttf):\n    i = ttf.rfind('.')\n    if i != -1:\n        ttf = ttf[:i]\n    return ttf + '.eotlite'\ndef readfont(f):\n    data = open(f, 'rb').read()\n    return data\ndef get_table_directory(data):\n    \"\"\"read the SFNT header and table directory\"\"\"",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "documentation": {}
    },
    {
        "label": "readfont",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "peekOfCode": "def readfont(f):\n    data = open(f, 'rb').read()\n    return data\ndef get_table_directory(data):\n    \"\"\"read the SFNT header and table directory\"\"\"\n    datalen = len(data)\n    sfntsize = struct.calcsize(OpenType.SFNT_UNPACK)\n    if sfntsize > datalen:\n        raise FontError, 'truncated font data'\n    sfntvers, numTables = struct.unpack(OpenType.SFNT_UNPACK, data[:sfntsize])[:2]",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "documentation": {}
    },
    {
        "label": "get_table_directory",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "peekOfCode": "def get_table_directory(data):\n    \"\"\"read the SFNT header and table directory\"\"\"\n    datalen = len(data)\n    sfntsize = struct.calcsize(OpenType.SFNT_UNPACK)\n    if sfntsize > datalen:\n        raise FontError, 'truncated font data'\n    sfntvers, numTables = struct.unpack(OpenType.SFNT_UNPACK, data[:sfntsize])[:2]\n    if sfntvers != OpenType.SFNT_CFF and sfntvers != OpenType.SFNT_TRUE:\n        raise FontError, 'invalid font type';\n    font = {}",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "documentation": {}
    },
    {
        "label": "get_name_records",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "peekOfCode": "def get_name_records(nametable):\n    \"\"\"reads through the name records within name table\"\"\"\n    name = {}\n    # read the header\n    headersize = 6\n    count, strOffset = struct.unpack('>2H', nametable[2:6])\n    namerecsize = struct.calcsize(OpenType.NAME_RECORD_UNPACK)\n    if count * namerecsize + headersize > len(nametable):\n        raise FontError, 'names exceed size of name table'\n    name['count'] = count",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "documentation": {}
    },
    {
        "label": "make_eot_name_headers",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "peekOfCode": "def make_eot_name_headers(fontdata, nameTableDir):\n    \"\"\"extracts names from the name table and generates the names header portion of the EOT header\"\"\"\n    nameoffset = nameTableDir['offset']\n    namelen = nameTableDir['length']\n    name = get_name_records(fontdata[nameoffset : nameoffset + namelen])\n    namestroffset = name['strOffset']\n    namerecs = name['namerecords']\n    eotnames = (OpenType.NAME_ID_FAMILY, OpenType.NAME_ID_STYLE, OpenType.NAME_ID_VERSION, OpenType.NAME_ID_FULL)\n    nameheaders = []\n    for nameid in eotnames:",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "documentation": {}
    },
    {
        "label": "make_root_string",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "peekOfCode": "def make_root_string():\n    return struct.pack('2x')\ndef make_eot_header(fontdata):\n    \"\"\"given ttf font data produce an EOT header\"\"\"\n    fontDataSize = len(fontdata)\n    font = get_table_directory(fontdata)\n    # toss out .otf fonts, t2embed library doesn't support these\n    tableDir = font['tableDir']\n    # check for required tables\n    required = (OpenType.TABLE_HEAD, OpenType.TABLE_NAME, OpenType.TABLE_OS2)",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "documentation": {}
    },
    {
        "label": "make_eot_header",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "peekOfCode": "def make_eot_header(fontdata):\n    \"\"\"given ttf font data produce an EOT header\"\"\"\n    fontDataSize = len(fontdata)\n    font = get_table_directory(fontdata)\n    # toss out .otf fonts, t2embed library doesn't support these\n    tableDir = font['tableDir']\n    # check for required tables\n    required = (OpenType.TABLE_HEAD, OpenType.TABLE_NAME, OpenType.TABLE_OS2)\n    for table in required:\n        if not (table in tableDir):",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "documentation": {}
    },
    {
        "label": "write_eot_font",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "peekOfCode": "def write_eot_font(eot, header, data):\n    open(eot,'wb').write(''.join((header, data)))\n    return\ndef main():\n    # deal with options\n    p = optparse.OptionParser()\n    p.add_option('--output', '-o', default=\"world\")\n    options, args = p.parse_args()\n    # iterate over font files\n    for f in args:",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "peekOfCode": "def main():\n    # deal with options\n    p = optparse.OptionParser()\n    p.add_option('--output', '-o', default=\"world\")\n    options, args = p.parse_args()\n    # iterate over font files\n    for f in args:\n        data = readfont(f)\n        if len(data) == 0:\n            print 'Error reading %s' % f",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.eotlitetool",
        "documentation": {}
    },
    {
        "label": "SCRIPT_PATH",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "peekOfCode": "SCRIPT_PATH = os.path.dirname(os.path.abspath(__file__))\nINPUT_SVG_DIR = os.path.join(SCRIPT_PATH, '..', '..', 'src')\nOUTPUT_FONT_DIR = os.path.join(SCRIPT_PATH, '..', '..', 'fonts')\nMANIFEST_PATH = os.path.join(SCRIPT_PATH, '..', 'manifest.json')\nBUILD_DATA_PATH = os.path.join(SCRIPT_PATH, '..', 'build_data.json')\nAUTO_WIDTH = True\nKERNING = 15\ncp = 0xf100\nm = md5.new()\nf = fontforge.font()",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "documentation": {}
    },
    {
        "label": "INPUT_SVG_DIR",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "peekOfCode": "INPUT_SVG_DIR = os.path.join(SCRIPT_PATH, '..', '..', 'src')\nOUTPUT_FONT_DIR = os.path.join(SCRIPT_PATH, '..', '..', 'fonts')\nMANIFEST_PATH = os.path.join(SCRIPT_PATH, '..', 'manifest.json')\nBUILD_DATA_PATH = os.path.join(SCRIPT_PATH, '..', 'build_data.json')\nAUTO_WIDTH = True\nKERNING = 15\ncp = 0xf100\nm = md5.new()\nf = fontforge.font()\nf.encoding = 'UnicodeFull'",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "documentation": {}
    },
    {
        "label": "OUTPUT_FONT_DIR",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "peekOfCode": "OUTPUT_FONT_DIR = os.path.join(SCRIPT_PATH, '..', '..', 'fonts')\nMANIFEST_PATH = os.path.join(SCRIPT_PATH, '..', 'manifest.json')\nBUILD_DATA_PATH = os.path.join(SCRIPT_PATH, '..', 'build_data.json')\nAUTO_WIDTH = True\nKERNING = 15\ncp = 0xf100\nm = md5.new()\nf = fontforge.font()\nf.encoding = 'UnicodeFull'\nf.design_size = 16",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "documentation": {}
    },
    {
        "label": "MANIFEST_PATH",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "peekOfCode": "MANIFEST_PATH = os.path.join(SCRIPT_PATH, '..', 'manifest.json')\nBUILD_DATA_PATH = os.path.join(SCRIPT_PATH, '..', 'build_data.json')\nAUTO_WIDTH = True\nKERNING = 15\ncp = 0xf100\nm = md5.new()\nf = fontforge.font()\nf.encoding = 'UnicodeFull'\nf.design_size = 16\nf.em = 512",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "documentation": {}
    },
    {
        "label": "BUILD_DATA_PATH",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "peekOfCode": "BUILD_DATA_PATH = os.path.join(SCRIPT_PATH, '..', 'build_data.json')\nAUTO_WIDTH = True\nKERNING = 15\ncp = 0xf100\nm = md5.new()\nf = fontforge.font()\nf.encoding = 'UnicodeFull'\nf.design_size = 16\nf.em = 512\nf.ascent = 448",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "documentation": {}
    },
    {
        "label": "AUTO_WIDTH",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "peekOfCode": "AUTO_WIDTH = True\nKERNING = 15\ncp = 0xf100\nm = md5.new()\nf = fontforge.font()\nf.encoding = 'UnicodeFull'\nf.design_size = 16\nf.em = 512\nf.ascent = 448\nf.descent = 64",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "documentation": {}
    },
    {
        "label": "KERNING",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "peekOfCode": "KERNING = 15\ncp = 0xf100\nm = md5.new()\nf = fontforge.font()\nf.encoding = 'UnicodeFull'\nf.design_size = 16\nf.em = 512\nf.ascent = 448\nf.descent = 64\nmanifest_file = open(MANIFEST_PATH, 'r')",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "documentation": {}
    },
    {
        "label": "cp",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "peekOfCode": "cp = 0xf100\nm = md5.new()\nf = fontforge.font()\nf.encoding = 'UnicodeFull'\nf.design_size = 16\nf.em = 512\nf.ascent = 448\nf.descent = 64\nmanifest_file = open(MANIFEST_PATH, 'r')\nmanifest_data = json.loads(manifest_file.read())",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "peekOfCode": "m = md5.new()\nf = fontforge.font()\nf.encoding = 'UnicodeFull'\nf.design_size = 16\nf.em = 512\nf.ascent = 448\nf.descent = 64\nmanifest_file = open(MANIFEST_PATH, 'r')\nmanifest_data = json.loads(manifest_file.read())\nmanifest_file.close()",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "peekOfCode": "f = fontforge.font()\nf.encoding = 'UnicodeFull'\nf.design_size = 16\nf.em = 512\nf.ascent = 448\nf.descent = 64\nmanifest_file = open(MANIFEST_PATH, 'r')\nmanifest_data = json.loads(manifest_file.read())\nmanifest_file.close()\nprint \"Load Manifest, Icons: %s\" % ( len(manifest_data['icons']) )",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "documentation": {}
    },
    {
        "label": "f.encoding",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "peekOfCode": "f.encoding = 'UnicodeFull'\nf.design_size = 16\nf.em = 512\nf.ascent = 448\nf.descent = 64\nmanifest_file = open(MANIFEST_PATH, 'r')\nmanifest_data = json.loads(manifest_file.read())\nmanifest_file.close()\nprint \"Load Manifest, Icons: %s\" % ( len(manifest_data['icons']) )\nbuild_data = copy.deepcopy(manifest_data)",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "documentation": {}
    },
    {
        "label": "f.design_size",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "peekOfCode": "f.design_size = 16\nf.em = 512\nf.ascent = 448\nf.descent = 64\nmanifest_file = open(MANIFEST_PATH, 'r')\nmanifest_data = json.loads(manifest_file.read())\nmanifest_file.close()\nprint \"Load Manifest, Icons: %s\" % ( len(manifest_data['icons']) )\nbuild_data = copy.deepcopy(manifest_data)\nbuild_data['icons'] = []",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "documentation": {}
    },
    {
        "label": "f.em",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "peekOfCode": "f.em = 512\nf.ascent = 448\nf.descent = 64\nmanifest_file = open(MANIFEST_PATH, 'r')\nmanifest_data = json.loads(manifest_file.read())\nmanifest_file.close()\nprint \"Load Manifest, Icons: %s\" % ( len(manifest_data['icons']) )\nbuild_data = copy.deepcopy(manifest_data)\nbuild_data['icons'] = []\nfont_name = manifest_data['name']",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "documentation": {}
    },
    {
        "label": "f.ascent",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "peekOfCode": "f.ascent = 448\nf.descent = 64\nmanifest_file = open(MANIFEST_PATH, 'r')\nmanifest_data = json.loads(manifest_file.read())\nmanifest_file.close()\nprint \"Load Manifest, Icons: %s\" % ( len(manifest_data['icons']) )\nbuild_data = copy.deepcopy(manifest_data)\nbuild_data['icons'] = []\nfont_name = manifest_data['name']\nm.update(font_name + ';')",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "documentation": {}
    },
    {
        "label": "f.descent",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "peekOfCode": "f.descent = 64\nmanifest_file = open(MANIFEST_PATH, 'r')\nmanifest_data = json.loads(manifest_file.read())\nmanifest_file.close()\nprint \"Load Manifest, Icons: %s\" % ( len(manifest_data['icons']) )\nbuild_data = copy.deepcopy(manifest_data)\nbuild_data['icons'] = []\nfont_name = manifest_data['name']\nm.update(font_name + ';')\nm.update(manifest_data['prefix'] + ';')",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "documentation": {}
    },
    {
        "label": "manifest_file",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "peekOfCode": "manifest_file = open(MANIFEST_PATH, 'r')\nmanifest_data = json.loads(manifest_file.read())\nmanifest_file.close()\nprint \"Load Manifest, Icons: %s\" % ( len(manifest_data['icons']) )\nbuild_data = copy.deepcopy(manifest_data)\nbuild_data['icons'] = []\nfont_name = manifest_data['name']\nm.update(font_name + ';')\nm.update(manifest_data['prefix'] + ';')\nfor dirname, dirnames, filenames in os.walk(INPUT_SVG_DIR):",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "documentation": {}
    },
    {
        "label": "manifest_data",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "peekOfCode": "manifest_data = json.loads(manifest_file.read())\nmanifest_file.close()\nprint \"Load Manifest, Icons: %s\" % ( len(manifest_data['icons']) )\nbuild_data = copy.deepcopy(manifest_data)\nbuild_data['icons'] = []\nfont_name = manifest_data['name']\nm.update(font_name + ';')\nm.update(manifest_data['prefix'] + ';')\nfor dirname, dirnames, filenames in os.walk(INPUT_SVG_DIR):\n  for filename in filenames:",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "documentation": {}
    },
    {
        "label": "build_data",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "peekOfCode": "build_data = copy.deepcopy(manifest_data)\nbuild_data['icons'] = []\nfont_name = manifest_data['name']\nm.update(font_name + ';')\nm.update(manifest_data['prefix'] + ';')\nfor dirname, dirnames, filenames in os.walk(INPUT_SVG_DIR):\n  for filename in filenames:\n    name, ext = os.path.splitext(filename)\n    filePath = os.path.join(dirname, filename)\n    size = os.path.getsize(filePath)",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "documentation": {}
    },
    {
        "label": "build_data['icons']",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "peekOfCode": "build_data['icons'] = []\nfont_name = manifest_data['name']\nm.update(font_name + ';')\nm.update(manifest_data['prefix'] + ';')\nfor dirname, dirnames, filenames in os.walk(INPUT_SVG_DIR):\n  for filename in filenames:\n    name, ext = os.path.splitext(filename)\n    filePath = os.path.join(dirname, filename)\n    size = os.path.getsize(filePath)\n    if ext in ['.svg', '.eps']:",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "documentation": {}
    },
    {
        "label": "font_name",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "peekOfCode": "font_name = manifest_data['name']\nm.update(font_name + ';')\nm.update(manifest_data['prefix'] + ';')\nfor dirname, dirnames, filenames in os.walk(INPUT_SVG_DIR):\n  for filename in filenames:\n    name, ext = os.path.splitext(filename)\n    filePath = os.path.join(dirname, filename)\n    size = os.path.getsize(filePath)\n    if ext in ['.svg', '.eps']:\n      # see if this file is already in the manifest",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "documentation": {}
    },
    {
        "label": "build_hash",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "description": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "peekOfCode": "build_hash = m.hexdigest()\nif build_hash == manifest_data.get('build_hash'):\n  print \"Source files unchanged, did not rebuild fonts\"\nelse:\n  manifest_data['build_hash'] = build_hash\n  f.fontname = font_name\n  f.familyname = font_name\n  f.fullname = font_name\n  f.generate(fontfile + '.ttf')\n  f.generate(fontfile + '.svg')",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.scripts.generate_font",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "description": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "peekOfCode": "def main():\n  generate_font_files()\n  data = get_build_data()\n  rename_svg_glyph_names(data)\n  generate_scss(data)\n  generate_less(data)\n  generate_cheatsheet(data)\n  generate_component_json(data)\n  generate_composer_json(data)\n  generate_bower_json(data)",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "documentation": {}
    },
    {
        "label": "generate_font_files",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "description": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "peekOfCode": "def generate_font_files():\n  print(\"Generate Fonts\")\n  cmd = \"fontforge -script %s/scripts/generate_font.py\" % (BUILDER_PATH)\n  call(cmd, shell=True)\ndef rename_svg_glyph_names(data):\n  # hacky and slow (but safe) way to rename glyph-name attributes\n  svg_path = os.path.join(FONTS_FOLDER_PATH, 'ionicons.svg')\n  svg_file = open(svg_path, 'r+')\n  svg_text = svg_file.read()\n  svg_file.seek(0)",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "documentation": {}
    },
    {
        "label": "rename_svg_glyph_names",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "description": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "peekOfCode": "def rename_svg_glyph_names(data):\n  # hacky and slow (but safe) way to rename glyph-name attributes\n  svg_path = os.path.join(FONTS_FOLDER_PATH, 'ionicons.svg')\n  svg_file = open(svg_path, 'r+')\n  svg_text = svg_file.read()\n  svg_file.seek(0)\n  for ionicon in data['icons']:\n    # uniF2CA\n    org_name = 'uni%s' % (ionicon['code'].replace('0x', '').upper())\n    ion_name = 'ion-%s' % (ionicon['name'])",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "documentation": {}
    },
    {
        "label": "generate_less",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "description": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "peekOfCode": "def generate_less(data):\n  print(\"Generate LESS\")\n  font_name = data['name']\n  font_version = data['version']\n  css_prefix = data['prefix']\n  variables_file_path = os.path.join(LESS_FOLDER_PATH, '_ionicons-variables.less')\n  icons_file_path = os.path.join(LESS_FOLDER_PATH, '_ionicons-icons.less')\n  d = []\n  d.append('/*!');\n  d.append('Ionicons, v%s' % (font_version) );",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "documentation": {}
    },
    {
        "label": "generate_scss",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "description": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "peekOfCode": "def generate_scss(data):\n  print(\"Generate SCSS\")\n  font_name = data['name']\n  font_version = data['version']\n  css_prefix = data['prefix']\n  variables_file_path = os.path.join(SCSS_FOLDER_PATH, '_ionicons-variables.scss')\n  icons_file_path = os.path.join(SCSS_FOLDER_PATH, '_ionicons-icons.scss')\n  d = []\n  d.append('// Ionicons Variables')\n  d.append('// --------------------------\\n')",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "documentation": {}
    },
    {
        "label": "generate_css_from_scss",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "description": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "peekOfCode": "def generate_css_from_scss(data):\n  print(\"Generate CSS From SCSS\")\n  scss_file_path = os.path.join(SCSS_FOLDER_PATH, 'ionicons.scss')\n  css_file_path = os.path.join(CSS_FOLDER_PATH, 'ionicons.css')\n  css_min_file_path = os.path.join(CSS_FOLDER_PATH, 'ionicons.min.css')\n  cmd = \"sass %s %s --style compact\" % (scss_file_path, css_file_path)\n  call(cmd, shell=True)\n  print(\"Generate Minified CSS From SCSS\")\n  cmd = \"sass %s %s --style compressed\" % (scss_file_path, css_min_file_path)\n  call(cmd, shell=True)",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "documentation": {}
    },
    {
        "label": "generate_cheatsheet",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "description": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "peekOfCode": "def generate_cheatsheet(data):\n  print(\"Generate Cheatsheet\")\n  cheatsheet_file_path = os.path.join(ROOT_PATH, 'cheatsheet.html')\n  template_path = os.path.join(BUILDER_PATH, 'cheatsheet', 'template.html')\n  icon_row_path = os.path.join(BUILDER_PATH, 'cheatsheet', 'icon-row.html')\n  f = open(template_path, 'r')\n  template_html = f.read()\n  f.close()\n  f = open(icon_row_path, 'r')\n  icon_row_template = f.read()",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "documentation": {}
    },
    {
        "label": "generate_component_json",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "description": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "peekOfCode": "def generate_component_json(data):\n  print(\"Generate component.json\")\n  d = {\n    \"name\": data['name'],\n    \"repo\": \"driftyco/ionicons\",\n    \"description\": \"The premium icon font for Ionic Framework.\",\n    \"version\": data['version'],\n    \"keywords\": [],\n    \"dependencies\": {},\n    \"development\": {},",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "documentation": {}
    },
    {
        "label": "generate_composer_json",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "description": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "peekOfCode": "def generate_composer_json(data):\n  print(\"Generate composer.json\")\n  d = {\n    \"name\": \"driftyco/ionicons\",\n    \"description\": \"The premium icon font for Ionic Framework.\",\n    \"keywords\": [ \"fonts\", \"icon font\", \"icons\", \"ionic\", \"web font\"],\n    \"homepage\": \"http://ionicons.com/\",\n    \"authors\": [\n      {\n        \"name\": \"Ben Sperry\",",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "documentation": {}
    },
    {
        "label": "generate_bower_json",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "description": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "peekOfCode": "def generate_bower_json(data):\n  print(\"Generate bower.json\")\n  d = {\n    \"name\": data['name'],\n    \"version\": data['version'],\n    \"homepage\": \"https://github.com/driftyco/ionicons\",\n    \"authors\": [\n      \"Ben Sperry <ben@drifty.com>\",\n      \"Adam Bradley <adam@drifty.com>\",\n      \"Max Lynch <max@drifty.com>\"",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "documentation": {}
    },
    {
        "label": "get_build_data",
        "kind": 2,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "description": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "peekOfCode": "def get_build_data():\n  build_data_path = os.path.join(BUILDER_PATH, 'build_data.json')\n  f = open(build_data_path, 'r')\n  data = json.loads(f.read())\n  f.close()\n  return data\nif __name__ == \"__main__\":\n  main()",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "documentation": {}
    },
    {
        "label": "BUILDER_PATH",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "description": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "peekOfCode": "BUILDER_PATH = os.path.dirname(os.path.abspath(__file__))\nROOT_PATH = os.path.join(BUILDER_PATH, '..')\nFONTS_FOLDER_PATH = os.path.join(ROOT_PATH, 'fonts')\nCSS_FOLDER_PATH = os.path.join(ROOT_PATH, 'css')\nSCSS_FOLDER_PATH = os.path.join(ROOT_PATH, 'scss')\nLESS_FOLDER_PATH = os.path.join(ROOT_PATH, 'less')\ndef main():\n  generate_font_files()\n  data = get_build_data()\n  rename_svg_glyph_names(data)",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "documentation": {}
    },
    {
        "label": "ROOT_PATH",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "description": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "peekOfCode": "ROOT_PATH = os.path.join(BUILDER_PATH, '..')\nFONTS_FOLDER_PATH = os.path.join(ROOT_PATH, 'fonts')\nCSS_FOLDER_PATH = os.path.join(ROOT_PATH, 'css')\nSCSS_FOLDER_PATH = os.path.join(ROOT_PATH, 'scss')\nLESS_FOLDER_PATH = os.path.join(ROOT_PATH, 'less')\ndef main():\n  generate_font_files()\n  data = get_build_data()\n  rename_svg_glyph_names(data)\n  generate_scss(data)",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "documentation": {}
    },
    {
        "label": "FONTS_FOLDER_PATH",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "description": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "peekOfCode": "FONTS_FOLDER_PATH = os.path.join(ROOT_PATH, 'fonts')\nCSS_FOLDER_PATH = os.path.join(ROOT_PATH, 'css')\nSCSS_FOLDER_PATH = os.path.join(ROOT_PATH, 'scss')\nLESS_FOLDER_PATH = os.path.join(ROOT_PATH, 'less')\ndef main():\n  generate_font_files()\n  data = get_build_data()\n  rename_svg_glyph_names(data)\n  generate_scss(data)\n  generate_less(data)",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "documentation": {}
    },
    {
        "label": "CSS_FOLDER_PATH",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "description": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "peekOfCode": "CSS_FOLDER_PATH = os.path.join(ROOT_PATH, 'css')\nSCSS_FOLDER_PATH = os.path.join(ROOT_PATH, 'scss')\nLESS_FOLDER_PATH = os.path.join(ROOT_PATH, 'less')\ndef main():\n  generate_font_files()\n  data = get_build_data()\n  rename_svg_glyph_names(data)\n  generate_scss(data)\n  generate_less(data)\n  generate_cheatsheet(data)",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "documentation": {}
    },
    {
        "label": "SCSS_FOLDER_PATH",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "description": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "peekOfCode": "SCSS_FOLDER_PATH = os.path.join(ROOT_PATH, 'scss')\nLESS_FOLDER_PATH = os.path.join(ROOT_PATH, 'less')\ndef main():\n  generate_font_files()\n  data = get_build_data()\n  rename_svg_glyph_names(data)\n  generate_scss(data)\n  generate_less(data)\n  generate_cheatsheet(data)\n  generate_component_json(data)",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "documentation": {}
    },
    {
        "label": "LESS_FOLDER_PATH",
        "kind": 5,
        "importPath": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "description": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "peekOfCode": "LESS_FOLDER_PATH = os.path.join(ROOT_PATH, 'less')\ndef main():\n  generate_font_files()\n  data = get_build_data()\n  rename_svg_glyph_names(data)\n  generate_scss(data)\n  generate_less(data)\n  generate_cheatsheet(data)\n  generate_component_json(data)\n  generate_composer_json(data)",
        "detail": "static_in_env.font.ionicons-2.0.1.builder.generate",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0001_initial",
        "description": "user.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('shop', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Address',\n            fields=[",
        "detail": "user.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0002_wishlist",
        "description": "user.migrations.0002_wishlist",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('shop', '0002_item_brand_name_company_comments_item_comments_and_more'),\n        ('user', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='wishlist',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "user.migrations.0002_wishlist",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0003_remove_order_billing_address_remove_order_coupon_and_more",
        "description": "user.migrations.0003_remove_order_billing_address_remove_order_coupon_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('user', '0002_wishlist'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='order',\n            name='billing_address',\n        ),\n        migrations.RemoveField(",
        "detail": "user.migrations.0003_remove_order_billing_address_remove_order_coupon_and_more",
        "documentation": {}
    },
    {
        "label": "cart_item_count",
        "kind": 2,
        "importPath": "user.templatetags.cart_template_tags",
        "description": "user.templatetags.cart_template_tags",
        "peekOfCode": "def cart_item_count(user):\n    if user.is_authenticated:\n        qs = Order.objects.filter(user=user, ordered=False)\n        if qs.exists():\n            return qs[0].items.count()\n    return 0",
        "detail": "user.templatetags.cart_template_tags",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "user.templatetags.cart_template_tags",
        "description": "user.templatetags.cart_template_tags",
        "peekOfCode": "register = template.Library()\n@register.filter\ndef cart_item_count(user):\n    if user.is_authenticated:\n        qs = Order.objects.filter(user=user, ordered=False)\n        if qs.exists():\n            return qs[0].items.count()\n    return 0",
        "detail": "user.templatetags.cart_template_tags",
        "documentation": {}
    },
    {
        "label": "categories",
        "kind": 2,
        "importPath": "user.templatetags.category_template_tags",
        "description": "user.templatetags.category_template_tags",
        "peekOfCode": "def categories():\n    items = Category.objects.filter(is_active=True).order_by('category')\n    items_li = \"\"\n    for i in items:\n        items_li += \"\"\"<li><a href=\"/category/{}\">{}</a></li>\"\"\".format(\n            i.slug, i.category)\n    return mark_safe(items_li)\n@register.simple_tag\ndef categories_mobile():\n    items = Category.objects.filter(is_active=True).order_by('category')",
        "detail": "user.templatetags.category_template_tags",
        "documentation": {}
    },
    {
        "label": "categories_mobile",
        "kind": 2,
        "importPath": "user.templatetags.category_template_tags",
        "description": "user.templatetags.category_template_tags",
        "peekOfCode": "def categories_mobile():\n    items = Category.objects.filter(is_active=True).order_by('category')\n    items_li = \"\"\n    for i in items:\n        items_li += \"\"\"<li class=\"item-menu-mobile\"><a href=\"/category/{}\">{}</a></li>\"\"\".format(\n            i.slug, i.category)\n    return mark_safe(items_li)\n@register.simple_tag\ndef categories_li_a():\n    items = Category.objects.filter(is_active=True).order_by('category')",
        "detail": "user.templatetags.category_template_tags",
        "documentation": {}
    },
    {
        "label": "categories_li_a",
        "kind": 2,
        "importPath": "user.templatetags.category_template_tags",
        "description": "user.templatetags.category_template_tags",
        "peekOfCode": "def categories_li_a():\n    items = Category.objects.filter(is_active=True).order_by('category')\n    items_li_a = \"\"\n    for i in items:\n        items_li_a += \"\"\"<li class=\"p-t-4\"><a href=\"/category/{}\" class=\"s-text13\">{}</a></li>\"\"\".format(i.slug,\n                                                                                                         i.category)\n    return mark_safe(items_li_a)\n@register.simple_tag\ndef categories_div():\n    \"\"\"",
        "detail": "user.templatetags.category_template_tags",
        "documentation": {}
    },
    {
        "label": "categories_div",
        "kind": 2,
        "importPath": "user.templatetags.category_template_tags",
        "description": "user.templatetags.category_template_tags",
        "peekOfCode": "def categories_div():\n    \"\"\"\n    section banner\n    :return:\n    \"\"\"\n    items = Category.objects.filter(is_active=True).order_by('category')\n    items_div = \"\"\n    item_div_list = \"\"\n    for i, j in enumerate(items):\n        if not i % 2:",
        "detail": "user.templatetags.category_template_tags",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "user.templatetags.category_template_tags",
        "description": "user.templatetags.category_template_tags",
        "peekOfCode": "register = template.Library()\n@register.simple_tag\ndef categories():\n    items = Category.objects.filter(is_active=True).order_by('category')\n    items_li = \"\"\n    for i in items:\n        items_li += \"\"\"<li><a href=\"/category/{}\">{}</a></li>\"\"\".format(\n            i.slug, i.category)\n    return mark_safe(items_li)\n@register.simple_tag",
        "detail": "user.templatetags.category_template_tags",
        "documentation": {}
    },
    {
        "label": "slides",
        "kind": 2,
        "importPath": "user.templatetags.slide_template_tags",
        "description": "user.templatetags.slide_template_tags",
        "peekOfCode": "def slides():\n    items = Slide.objects.filter(is_active=True).order_by('pk')\n    items_div = \"\"\n    for i in items:\n        items_div += \"\"\"<div class=\"item-slick1 item2-slick1\" style=\"background-image: url(/media/{});\">\n        <div class=\"wrap-content-slide1 sizefull flex-col-c-m p-l-15 p-r-15 p-t-150 p-b-170\">\n        <span class=\"caption1-slide1 m-text1 t-center animated visible-false m-b-15 text-danger\" data-appear=\"rollIn\">\n        {}</span>\n        <h2 class=\"caption2-slide1 xl-text1 t-center animated visible-false m-b-37 text-danger \" data-appear=\"lightSpeedIn\">\n        {}</h2>",
        "detail": "user.templatetags.slide_template_tags",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "user.templatetags.slide_template_tags",
        "description": "user.templatetags.slide_template_tags",
        "peekOfCode": "register = template.Library()\n@register.simple_tag\ndef slides():\n    items = Slide.objects.filter(is_active=True).order_by('pk')\n    items_div = \"\"\n    for i in items:\n        items_div += \"\"\"<div class=\"item-slick1 item2-slick1\" style=\"background-image: url(/media/{});\">\n        <div class=\"wrap-content-slide1 sizefull flex-col-c-m p-l-15 p-r-15 p-t-150 p-b-170\">\n        <span class=\"caption1-slide1 m-text1 t-center animated visible-false m-b-15 text-danger\" data-appear=\"rollIn\">\n        {}</span>",
        "detail": "user.templatetags.slide_template_tags",
        "documentation": {}
    },
    {
        "label": "UserConfig",
        "kind": 6,
        "importPath": "user.apps",
        "description": "user.apps",
        "peekOfCode": "class UserConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'user'",
        "detail": "user.apps",
        "documentation": {}
    },
    {
        "label": "unauthenticated_user",
        "kind": 2,
        "importPath": "user.decorators",
        "description": "user.decorators",
        "peekOfCode": "def unauthenticated_user(view_func):\n    def wrapper_func(request, *args, **kwargs):\n        if request.user.is_authenticated:\n            return redirect('user:home')\n        else:\n            return view_func(request,*args, **kwargs)\n    return wrapper_func\ndef allowed_users(allowed_roles=[]):\n    def decorator(view_func):\n        def wrapper_func(request, *args, **kwargs):",
        "detail": "user.decorators",
        "documentation": {}
    },
    {
        "label": "allowed_users",
        "kind": 2,
        "importPath": "user.decorators",
        "description": "user.decorators",
        "peekOfCode": "def allowed_users(allowed_roles=[]):\n    def decorator(view_func):\n        def wrapper_func(request, *args, **kwargs):\n            group= None\n            if request.user.groups.exists():\n                group=request.user.groups.all()[0].name\n            if group in allowed_roles:\n                return view_func(request,*args, **kwargs)\n            else:\n                return render(request,'unauthorized.html')",
        "detail": "user.decorators",
        "documentation": {}
    },
    {
        "label": "CheckoutForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class CheckoutForm(forms.Form):\n    shipping_address = forms.CharField(required=False)\n    shipping_address2 = forms.CharField(required=False)\n    shipping_country = CountryField(blank_label='(select country)').formfield(\n        required=False,\n        widget=CountrySelectWidget(attrs={\n            'class': 'custom-select d-block w-100',\n        }))\n    shipping_zip = forms.CharField(required=False)\n    billing_address = forms.CharField(required=False)",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "CouponForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class CouponForm(forms.Form):\n    code = forms.CharField(widget=forms.TextInput(attrs={\n        'class': 'form-control',\n        'placeholder': 'Promo code',\n        'aria-label': 'Recipient\\'s username',\n        'aria-describedby': 'basic-addon2'\n    }))\nclass RefundForm(forms.Form):\n    ref_code = forms.CharField()\n    message = forms.CharField(widget=forms.Textarea(attrs={",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "RefundForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class RefundForm(forms.Form):\n    ref_code = forms.CharField()\n    message = forms.CharField(widget=forms.Textarea(attrs={\n        'rows': 4\n    }))\n    email = forms.EmailField()\nclass PaymentForm(forms.Form):\n    stripeToken = forms.CharField(required=False)\n    save = forms.BooleanField(required=False)\n    use_default = forms.BooleanField(required=False)",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "PaymentForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class PaymentForm(forms.Form):\n    stripeToken = forms.CharField(required=False)\n    save = forms.BooleanField(required=False)\n    use_default = forms.BooleanField(required=False)\nclass CreateUserForm(UserCreationForm):\n    class Meta:\n        model=User\n        fields=['username','email','password1','password2']",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "CreateUserForm",
        "kind": 6,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "class CreateUserForm(UserCreationForm):\n    class Meta:\n        model=User\n        fields=['username','email','password1','password2']",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "PAYMENT_CHOICES",
        "kind": 5,
        "importPath": "user.forms",
        "description": "user.forms",
        "peekOfCode": "PAYMENT_CHOICES = (\n    ('O','Online Payment'),\n    ('C', 'Cash On Delivery'),\n)\nclass CheckoutForm(forms.Form):\n    shipping_address = forms.CharField(required=False)\n    shipping_address2 = forms.CharField(required=False)\n    shipping_country = CountryField(blank_label='(select country)').formfield(\n        required=False,\n        widget=CountrySelectWidget(attrs={",
        "detail": "user.forms",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "kind": 6,
        "importPath": "user.models",
        "description": "user.models",
        "peekOfCode": "class UserProfile(models.Model):\n    user = models.OneToOneField(\n        User, on_delete=models.CASCADE)\n    stripe_customer_id = models.CharField(max_length=50, blank=True, null=True)\n    one_click_purchasing = models.BooleanField(default=False)\n    def __str__(self):\n        return self.user.username\nclass wishlist(models.Model):\n    item=models.OneToOneField(Item,on_delete=models.CASCADE)\n    company=models.ForeignKey(company,on_delete=models.CASCADE)",
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "wishlist",
        "kind": 6,
        "importPath": "user.models",
        "description": "user.models",
        "peekOfCode": "class wishlist(models.Model):\n    item=models.OneToOneField(Item,on_delete=models.CASCADE)\n    company=models.ForeignKey(company,on_delete=models.CASCADE)",
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "user.urls",
        "description": "user.urls",
        "peekOfCode": "app_name = 'user'\nurlpatterns = [\n    path('', HomeView.as_view(), name=\"home\"),\n    path('register/', registerPage, name=\"register\"),\n    path('search/', search, name=\"search\"),\n    path('User_Profile/<pk>', profileView, name=\"profile\"),\n    path('login/', loginPage, name=\"login\"),\n    path('logout/', logoutUser, name=\"logout\"),\n    path('category/<slug>', CatView.as_view(), name='category'),\n    path('subcategory/<slug>', subCatView.as_view(), name='subcategory'),",
        "detail": "user.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "user.urls",
        "description": "user.urls",
        "peekOfCode": "urlpatterns = [\n    path('', HomeView.as_view(), name=\"home\"),\n    path('register/', registerPage, name=\"register\"),\n    path('search/', search, name=\"search\"),\n    path('User_Profile/<pk>', profileView, name=\"profile\"),\n    path('login/', loginPage, name=\"login\"),\n    path('logout/', logoutUser, name=\"logout\"),\n    path('category/<slug>', CatView.as_view(), name='category'),\n    path('subcategory/<slug>', subCatView.as_view(), name='subcategory'),\n    path('checkout/', CheckoutView.as_view(), name='checkout'),",
        "detail": "user.urls",
        "documentation": {}
    },
    {
        "label": "MyPasswordResetCompleteView",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class MyPasswordResetCompleteView(PasswordResetCompleteView):\n    def get_success_url(self):\n        return render(self.request, 'unauthorized.html')\nclass MyPasswordResetDoneView(TemplateView):\n    template_name = 'registration/password_reset_done.html'\n    def get(self, request, *args, **kwargs):\n        if request.user.is_authenticated:\n            if request.user.groups.all()[0].name == 'customer': # type: ignore\n                return redirect(reverse_lazy('user:login'))\n            elif request.user.groups.all()[0].name == \"shop\": # type: ignore",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "MyPasswordResetDoneView",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class MyPasswordResetDoneView(TemplateView):\n    template_name = 'registration/password_reset_done.html'\n    def get(self, request, *args, **kwargs):\n        if request.user.is_authenticated:\n            if request.user.groups.all()[0].name == 'customer': # type: ignore\n                return redirect(reverse_lazy('user:login'))\n            elif request.user.groups.all()[0].name == \"shop\": # type: ignore\n                return redirect(reverse_lazy('shop:account_login'))\n            elif request.user.groups.all()[0].name == 'employee': # type: ignore\n                return redirect(reverse_lazy('shop:account_login'))",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "MyPasswordResetView",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class MyPasswordResetView(PasswordResetView):\n    template_name = 'registration/password_reset_form.html'\n    email_template_name = 'registration/password_reset_email.html'\n    success_url = reverse_lazy('mypasswordresetdoneview')\n    subject_template_name = 'registration/password_reset_subject.txt'\nclass Author(DetailView): # type: ignore\n    model = AboutUs\n    template_name = \"author.html\"\n@login_required(login_url='user:login')\ndef profileView(request, pk):",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "Author",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class Author(DetailView): # type: ignore\n    model = AboutUs\n    template_name = \"author.html\"\n@login_required(login_url='user:login')\ndef profileView(request, pk):\n    data = User.objects.get(id=pk)\n    try:\n        address_s = Address.objects.get(user_id=pk, address_type=\"S\")\n    except ObjectDoesNotExist:\n        address_s = None",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "HomeView",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class HomeView(ListView):\n    # model = Item\n    template_name = \"home.html\"\n    def get_context_data(self, **kwargs):\n        pass_day = timezone.now()-timezone.timedelta(days=5)\n        context = super(HomeView, self).get_context_data(**kwargs)\n        context.update({\n            'category': Category.objects.order_by('category'),\n            'item': Item.objects.all(),\n            'time': timezone.now(),",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "CatView",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class CatView(ListView):\n    paginate_by = 4\n    def get(self, *args, **kwargs):\n        price_range = self.request.GET.get('price_range')\n        q = self.request.GET.get('q')\n        category = Category.objects.get(slug=self.kwargs['slug'])\n        sub_cat = subcategory.objects.filter(main=category.id) # type: ignore\n        if price_range == 'low_to_high':\n            item = Item.objects.filter(category=category, is_active=True).order_by('price')\n        elif price_range == 'high_to_low':",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "subCatView",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class subCatView(ListView):\n    paginate_by = 4\n    def get(self, *args, **kwargs):\n        category = subcategory.objects.get(slug=self.kwargs['slug'])\n        item = Item.objects.filter(subcategory=category, is_active=True)\n        context = {\n            'object_list': item,\n            'category_title': category.name,\n            # 'category_description': category.description,\n            # 'category_image': category.image,",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "OrderSummaryView",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class OrderSummaryView(LoginRequiredMixin, View):\n    def get(self, *args, **kwargs):\n        try:\n            order = Order.objects.get(user=self.request.user, ordered=False)\n            context = {\n                'object': order\n            }\n            return render(self.request, 'order_summary.html', context)\n        except ObjectDoesNotExist:\n            messages.warning(self.request, \"You do not have an active order\")",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "ItemDetailView",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class ItemDetailView(DetailView):\n    model = Item\n    template_name = \"product.html\"\n@login_required(login_url='user:login')\ndef add_to_cart(request, slug):\n    item = get_object_or_404(Item, slug=slug)\n    order_item, created = OrderItem.objects.get_or_create(\n        item=item,\n        user=request.user,\n        ordered=False",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "AddCouponView",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class AddCouponView(View):\n    def post(self, *args, **kwargs):\n        form = CouponForm(self.request.POST or None)\n        if form.is_valid():\n            try:\n                code = form.cleaned_data.get('code')\n                order = Order.objects.get(\n                    user=self.request.user, ordered=False)\n                order.coupon = get_coupon(self.request, code)\n                order.save()",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "RequestRefundView",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class RequestRefundView(View):\n    def get(self, *args, **kwargs):\n        form = RefundForm()\n        context = {\n            'form': form\n        }\n        return render(self.request, \"request_refund.html\", context)\n    def post(self, *args, **kwargs):\n        form = RefundForm(self.request.POST)\n        if form.is_valid():",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "Author",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class Author(DetailView):\n    model = AboutUs\n    template_name = \"author.html\"\nclass FileFieldFormView(FormView):\n    form_class = AboutUs\n    template_name = 'upload.html'  # Replace with your template.\n    success_url = '...'  # Replace with your URL or reverse().\n    def post(self, request, *args, **kwargs):\n        form_class = self.get_form_class()\n        form = self.get_form(form_class)",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "FileFieldFormView",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class FileFieldFormView(FormView):\n    form_class = AboutUs\n    template_name = 'upload.html'  # Replace with your template.\n    success_url = '...'  # Replace with your URL or reverse().\n    def post(self, request, *args, **kwargs):\n        form_class = self.get_form_class()\n        form = self.get_form(form_class)\n        files = request.FILES.getlist('file_field')\n        if form.is_valid():\n            for f in files:",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "CheckoutView",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class CheckoutView(View):\n    def get(self, *args, **kwargs):\n        try:\n            order = Order.objects.get(user=self.request.user, ordered=False)\n            form = CheckoutForm()\n            context = {\n                'form': form,\n                'couponform': CouponForm(),\n                'order': order,\n                'DISPLAY_COUPON_FORM': True",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "profileView",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def profileView(request, pk):\n    data = User.objects.get(id=pk)\n    try:\n        address_s = Address.objects.get(user_id=pk, address_type=\"S\")\n    except ObjectDoesNotExist:\n        address_s = None\n    return render(request, \"userProfile.html\", {'data': data, 'address': address_s})\ndef aboutus(request):\n    data = AboutUs.objects.all()\n    if request.method == \"POST\":",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "aboutus",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def aboutus(request):\n    data = AboutUs.objects.all()\n    if request.method == \"POST\":\n        ContactF = ContactForm()\n        name = request.POST.get('name')\n        email = request.POST.get('email')\n        subject = request.POST.get('subject')\n        ContactF.name = name\n        ContactF.email = email\n        ContactF.subject = subject",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "successful",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def successful(request,refCode):\n    orderItem=Order.objects.get(ref_code=refCode)\n    context={\n        'order':orderItem\n    }\n    template =get_template(\n        'account/email/order_successful.html')\n    content=template.render(context)\n    # email = EmailMessage(\n    #     'Thank you for purchasing',",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "create_ref_code",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def create_ref_code():\n    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=20))\ndef products(request):\n    context = {\n        'items': Item.objects.all()\n    }\n    return render(request, \"products.html\", context)\n@login_required\ndef wishList(request):\n    products = Item.objects.filter(users_wishlist=request.user)",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "products",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def products(request):\n    context = {\n        'items': Item.objects.all()\n    }\n    return render(request, \"products.html\", context)\n@login_required\ndef wishList(request):\n    products = Item.objects.filter(users_wishlist=request.user)\n    return render(request, \"user_wish_list.html\", {\"wishlist\": products})\n@login_required",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "wishList",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def wishList(request):\n    products = Item.objects.filter(users_wishlist=request.user)\n    return render(request, \"user_wish_list.html\", {\"wishlist\": products})\n@login_required\ndef add_to_wishlist(request, id):\n    product = get_object_or_404(Item, id=id)\n    if product.users_wishlist.filter(id=request.user.id).exists():\n        product.users_wishlist.remove(request.user)\n        messages.success(request, product.title + \" has been removed from your WishList\")\n    else:",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "add_to_wishlist",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def add_to_wishlist(request, id):\n    product = get_object_or_404(Item, id=id)\n    if product.users_wishlist.filter(id=request.user.id).exists():\n        product.users_wishlist.remove(request.user)\n        messages.success(request, product.title + \" has been removed from your WishList\")\n    else:\n        product.users_wishlist.add(request.user)\n        messages.success(request, \"Added \" +\n                         product.title + \" to your WishList\") # type: ignore\n    return HttpResponseRedirect(request.META[\"HTTP_REFERER\"])",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "order_history",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def order_history(request, pk):\n    # pass_day = timezone.now()-timezone.timedelta(days=5)\n    context = {\n        'category': Category.objects.order_by('category'),\n        'order': Order.objects.all().filter(user=pk).order_by('-ordered_date'),\n        'refund_date': order_date_pass,\n    }\n    return render(request, \"order_history.html\", context)\ndef order_date_pass(request, date):\n    pass_day = date-timezone.timedelta(days=7)",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "order_date_pass",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def order_date_pass(request, date):\n    pass_day = date-timezone.timedelta(days=7)\n    return pass_day\ndef is_valid_form(values):\n    valid = True\n    for field in values:\n        if field == '':\n            valid = False\n    return valid\nclass HomeView(ListView):",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "is_valid_form",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def is_valid_form(values):\n    valid = True\n    for field in values:\n        if field == '':\n            valid = False\n    return valid\nclass HomeView(ListView):\n    # model = Item\n    template_name = \"home.html\"\n    def get_context_data(self, **kwargs):",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def search(request):\n    q = request.GET['q']\n    data = Item.objects.filter(title__icontains=q)\n    return render(request, 'search.html', {'data': data})\nclass CatView(ListView):\n    paginate_by = 4\n    def get(self, *args, **kwargs):\n        price_range = self.request.GET.get('price_range')\n        q = self.request.GET.get('q')\n        category = Category.objects.get(slug=self.kwargs['slug'])",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "registerPage",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def registerPage(request):\n    form = CreateUserForm\n    if request.method == 'POST':\n        form = CreateUserForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            username = form.cleaned_data.get('username')\n            group = Group.objects.get(name='customer')\n            user.groups.add(group)\n            messages.success(request, 'Account was created for ' + username)",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "loginPage",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def loginPage(request):\n    if request.method == 'POST':\n        username = request.POST.get('username')\n        password = request.POST.get('password')\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            login(request, user)\n            return redirect('user:home')\n        else:\n            messages.info(request, 'username or password is incorrect')",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "logoutUser",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def logoutUser(request):\n    logout(request)\n    return redirect('user:login')\nclass OrderSummaryView(LoginRequiredMixin, View):\n    def get(self, *args, **kwargs):\n        try:\n            order = Order.objects.get(user=self.request.user, ordered=False)\n            context = {\n                'object': order\n            }",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "add_to_cart",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def add_to_cart(request, slug):\n    item = get_object_or_404(Item, slug=slug)\n    order_item, created = OrderItem.objects.get_or_create(\n        item=item,\n        user=request.user,\n        ordered=False\n    )\n    order_qs = Order.objects.filter(user=request.user, ordered=False)\n    if order_qs.exists():\n        order = order_qs[0]",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "remove_from_cart",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def remove_from_cart(request, slug):\n    item = get_object_or_404(Item, slug=slug)\n    order_qs = Order.objects.filter(\n        user=request.user,\n        ordered=False\n    )\n    if order_qs.exists():\n        order = order_qs[0]\n        # check if the order item is in the order\n        if order.items.filter(item__slug=item.slug).exists():",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "remove_single_item_from_cart",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def remove_single_item_from_cart(request, slug):\n    item = get_object_or_404(Item, slug=slug)\n    order_qs = Order.objects.filter(\n        user=request.user,\n        ordered=False\n    )\n    if order_qs.exists():\n        order = order_qs[0]\n        # check if the order item is in the order\n        if order.items.filter(item__slug=item.slug).exists():",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "get_coupon",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def get_coupon(request, code):\n    try:\n        coupon = Coupon.objects.get(code=code)\n        return coupon\n    except ObjectDoesNotExist:\n        messages.info(request, \"This coupon does not exist\")\n        return redirect(\"user:checkout\")\nclass AddCouponView(View):\n    def post(self, *args, **kwargs):\n        form = CouponForm(self.request.POST or None)",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]